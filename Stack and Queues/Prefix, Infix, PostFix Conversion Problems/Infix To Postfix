#include <bits/stdc++.h>
using namespace std;

int pref(char ch) {
	if(ch == '+' || ch == '-') return 1;
	else if(ch == '*' || ch == '/') return 2;
	else if(ch == '^') return 3;
	return -1;
}

string infixToPostfix(string exp){
	// Write your code here
	string ans = "";
	stack<char> stk;
	for(int i = 0 ; i < exp.length() ; i++) {
		if((exp[i] >= '0' && exp[i] <= '9') || (exp[i] >= 'a' && exp[i] <= 'z')) {
			ans += exp[i];
		} else if(exp[i] == '(') {
			stk.push(exp[i]);
		} else if(exp[i] == ')') {
			while(stk.top() != '(') {
				ans += stk.top();
				stk.pop();
			}
			stk.pop();
		} else if(stk.empty()) {
			stk.push(exp[i]);
		} else {
			while(!stk.empty() && (pref(exp[i]) <= pref(stk.top()))) {
				ans += stk.top();
				stk.pop();
			}
			stk.push(exp[i]);
		}
	}
	while(!stk.empty()) {
		ans += stk.top();
		stk.pop();
	}
	return ans;
}


// string infixToPostfix(string exp){
// 	// Write your code here
// 	string ans = "";
// 	stack<char> stk;
// 	for(int i = 0 ; i < exp.length() ; i++) {
// 		if((exp[i] >= '0' && exp[i] <= '9') || (exp[i] >= 'a' && exp[i] <= 'z')) {
// 			ans += exp[i];
// 		} else if(exp[i] == '(') {
// 			stk.push(exp[i]);
// 		} else if(exp[i] == ')') {
// 			while(stk.top() != '(') {
// 				ans += stk.top();
// 				stk.pop();
// 			}
// 			stk.pop();
// 		} else if(stk.empty()) {
// 			stk.push(exp[i]);
// 		} else if((exp[i] == '+' || exp[i] == '-') && (stk.top() == '+' || stk.top() == '-' || stk.top() == '*' || stk.top() == '/' || stk.top() == '^')) {
// 			while(!stk.empty() && (stk.top() == '+' || stk.top() == '-' || stk.top() == '*' || stk.top() == '/' || stk.top() == '^')) {
// 				ans += stk.top();
// 				stk.pop();
// 			}
// 			stk.push(exp[i]);
// 		} else if((exp[i] == '*' || exp[i] == '/') && (stk.top() == '*' || stk.top() == '/' || stk.top() == '^')) {
// 			while(!stk.empty() && (stk.top() == '*' || stk.top() == '/' || stk.top() == '^')) {
// 				ans += stk.top();
// 				stk.pop();
// 			}
// 			stk.push(exp[i]);
// 		} else if(exp[i] == '^' && stk.top() == '^') {
// 			while(!stk.empty() && stk.top() == '^') {
// 				ans += stk.top();
// 				stk.pop();
// 			}
// 			stk.push(exp[i]);
// 		} else {
// 			stk.push(exp[i]);
// 		}
// 	}
// 	while(!stk.empty()) {
// 		ans += stk.top();
// 		stk.pop();
// 	}
// 	return ans;
// }
