// Two pointer  TC: O(n)    SC: O(1)

long long getTrappedWater(long long* arr, int n) {
    // Write your code here.
    long long ans = 0;
    int left = 0;
    int right = n-1;
    int leftMax = -1;
    int rightMax = -1;
    while(left <= right) {
        if(arr[left] <= arr[right]) {
            if(arr[left] >= leftMax) {
                leftMax = arr[left];
            } else {
                ans += (leftMax-arr[left]);
            }
            left++;
        } else {
            if(arr[right] >= rightMax) {
                rightMax = arr[right];
            } else {
                ans += (rightMax-arr[right]);
            }
             right--;
        }
    }
    return ans;
}


// TC : O(2n)   SC: O(2n)

// long long getTrappedWater(long long* arr, int n) {
//     // Write your code here.
//     vector<long long> prefMax(n);
//     vector<long long> suffMax(n);
//     prefMax[0] = arr[0];
//     suffMax[n-1] = arr[n-1];
//     long long ans = 0;
//     for(int i = 1 ; i < n ; i++) {
//         prefMax[i] = max(prefMax[i-1],arr[i]);
//         suffMax[n-i-1] = max(suffMax[n-i], arr[n-i-1]);
//     }
//     for(int i = 0 ; i < n ; i++) {
//         ans += (min(prefMax[i],suffMax[i]) - arr[i]);
//     }
//     return ans;
// }
