
// Leetcode

struct Node {
    int key, value, cnt;
    Node *next; 
    Node *prev;
    Node(int _key, int _value) {
        key = _key;
        value = _value; 
        cnt = 1; 
    }
}; 
struct List {
    int size; 
    Node *head; 
    Node *tail; 
    List() {
        head = new Node(0, 0); 
        tail = new Node(0,0); 
        head->next = tail;
        tail->prev = head; 
        size = 0;
    }
    
    void addFront(Node *node) {
        Node* temp = head->next;
        node->next = temp;
        node->prev = head;
        head->next = node;
        temp->prev = node;
        size++; 
    }
    
    void removeNode(Node* delnode) {
        delnode->prev->next = delnode->next;
        delnode->next->prev = delnode->prev;
        size--; 
    }
    
    
    
};
class LFUCache {
    map<int, Node*> keyNode; 
    map<int, List*> freqListMap; 
    int maxSizeCache;
    int minFreq; 
    int curSize; 
public:
    LFUCache(int capacity) {
        maxSizeCache = capacity; 
        minFreq = 0;
        curSize = 0; 
    }
    void updateFreqListMap(Node *node) {
        keyNode.erase(node->key); 
        freqListMap[node->cnt]->removeNode(node); 
        if(node->cnt == minFreq && freqListMap[node->cnt]->size == 0) {
            minFreq++; 
        }
        
        List* nextHigherFreqList = new List();
        if(freqListMap.find(node->cnt + 1) != freqListMap.end()) {
            nextHigherFreqList = freqListMap[node->cnt + 1];
        } 
        node->cnt += 1; 
        nextHigherFreqList->addFront(node); 
        freqListMap[node->cnt] = nextHigherFreqList; 
        keyNode[node->key] = node;
    }
    
    int get(int key) {
        if(keyNode.find(key) != keyNode.end()) {
            Node* node = keyNode[key]; 
            int val = node->value; 
            updateFreqListMap(node); 
            return val; 
        }
        return -1; 
    }
    
    void put(int key, int value) {
        if (maxSizeCache == 0) {
            return;
        }
        if(keyNode.find(key) != keyNode.end()) {
            Node* node = keyNode[key]; 
            node->value = value; 
            updateFreqListMap(node); 
        }
        else {
            if(curSize == maxSizeCache) {
                List* list = freqListMap[minFreq]; 
                keyNode.erase(list->tail->prev->key); 
                freqListMap[minFreq]->removeNode(list->tail->prev);
                curSize--; 
            }
            curSize++; 
            // new value has to be added who is not there previously 
            minFreq = 1; 
            List* listFreq = new List(); 
            if(freqListMap.find(minFreq) != freqListMap.end()) {
                listFreq = freqListMap[minFreq]; 
            }
            Node* node = new Node(key, value); 
            listFreq->addFront(node);
            keyNode[key] = node; 
            freqListMap[minFreq] = listFreq; 
        }
    }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */











// struct Node {
//     public: 
//         int key,value,counter;
//         Node* prev, *next;
//         Node(int k, int v) {
//             key = k;
//             value = v;
//             counter = 1;
//         }
// };

// class LFUCache {
// public:
//     Node* head, *tail;
//     unordered_map<int,Node*> mpp;
//     int c = 0;

//     LFUCache(int capacity) {
//         c = capacity;
//         head = new Node(-1,-1);
//         tail = new Node(-1,-1);
//         head->next = tail;
//         tail->prev = head; 
//         head->counter = -1;
//         tail->counter = -1;   
//     }

//     void insertNode(Node* node) {
//         Node* curr = head->next;
//         while(curr != tail && curr->counter > node->counter) curr = curr->next;
//         node->next = curr;
//         node->prev = curr->prev;
//         curr->prev->next = node;
//         curr->prev = node;
//     }

//     void deleteNode(Node* node) {
//         node->prev->next = node->next;
//         node->next->prev = node->prev;
//     }

//     void insertNodeAtLast(Node* node) {
//         Node* curr = tail->prev;
//         while(curr != head && node->counter == curr->counter) curr = curr->prev;
//         node->next = curr->next;
//         node->prev = curr;
//         curr->next = node;
//         node->next->prev = node;
//     }
    
//     int get(int key) {
//         if(mpp.count(key) >= 1) {
//             Node* reqNode = mpp[key];
//             int val = reqNode->value;
//             Node* newNode = new Node(key,val);
//             newNode->counter = (reqNode->counter) + 1;
//             deleteNode(reqNode);
//             // delete reqNode;
//             insertNode(newNode);
//             mpp[key] = newNode;
//             return val;
//         } else return -1;
//     }
    
//     void put(int key, int value) {
//         Node* newNode = new Node(key,value);

//         if(mpp.count(key) >= 1) {
//             Node* existing = mpp[key];
//             if(existing->value == value) newNode->counter = (existing->counter) + 1;
//             deleteNode(existing);
//             // delete existing;
//             insertNode(newNode);
//             mpp[key] = newNode;   
//         } else {
//             if(c > 0) {
//                 c--;
//                 insertNode(newNode);
//                 mpp[key] = newNode;
//             } else {
//                 mpp.erase(tail->prev->key);
//                 deleteNode(tail->prev);
//                 insertNode(newNode);
//                 mpp[key] = newNode;
//             }
//         }
//     }
// };

// /**
//  * Your LFUCache object will be instantiated and called as such:
//  * LFUCache* obj = new LFUCache(capacity);
//  * int param_1 = obj->get(key);
//  * obj->put(key,value);
//  */
