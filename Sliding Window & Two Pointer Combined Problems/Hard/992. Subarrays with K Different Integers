class Solution {
public:
    int atMost(vector<int> &nums, int k, int n) {
        if(k < 0) return 0;

        int left = 0;
        int right = 0;
        int count = 0;

        unordered_map<int,int> mpp;

        while(right < n) {
            mpp[nums[right]]++;

            while(mpp.size() > k) {
                mpp[nums[left]]--;
                if(mpp[nums[left]] == 0) mpp.erase(nums[left]);
                left++;
            }

            if(mpp.size() <= k) {
                count += (right - left + 1);
            }

            right++;
        }
        return count;
    }

    int subarraysWithKDistinct(vector<int>& nums, int k) {
        
        int n = nums.size();
        return atMost(nums, k, n) - atMost(nums, k-1, n);
    }
};
