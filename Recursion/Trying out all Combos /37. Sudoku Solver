// Leetcode

class Solution {
public:
    bool isSafe(int row, int col, vector<vector<char>> &board, char value) {
        for(int i = 0 ; i < 9 ; i++) {
            if(board[row][i] == value) return false;
            if(board[i][col] == value) return false;
            if(board[3*(row/3)+(i/3)][3*(col/3)+(i%3)] == value) return false;
        }
        return true;
    }

    bool solve(vector<vector<char>>& board) {
        for(int row = 0 ; row < board.size() ; row++) {
            for(int col = 0 ; col < board[0].size() ; col++) {
                if(board[row][col] == '.') {
                    for(char value = '1' ; value <= '9' ; value++) {
                        if(isSafe(row, col, board, value)) {
                            board[row][col] = value;
                            if(solve(board) == true) return true;
                            else board[row][col] = '.'; 
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};



// CN

bool isSafe(int row, int col, int board[][9], int value) {
    for(int i = 0 ; i < 9 ; i++) {
        if(board[row][i] == value) return false;
        if(board[i][col] == value) return false;
        if(board[3*(row/3)+(i/3)][3*(col/3)+(i%3)] == value) return false;
    }
    return true;
}

bool sudokuSolver(int board[][9]) {
    /* Don't write main().
     *  Don't read input, it is passed as function argument.
     *  Don't print output and return output as specified in the question
    */
    for(int row = 0 ; row < 9 ; row++) {
        for(int col = 0 ; col < 9 ; col++) {
            if(board[row][col] == 0) {
                for(int value = 1 ; value <= 9 ; value++) {
                      if(isSafe(row, col, board, value)) {
                          board[row][col] = value;
                          if(sudokuSolver(board) == true) {
                              return true;
                          }
                          else {
                              board[row][col] = 0;
                          }
                      }
                }
                return false;
            }
        }
    }
    return true;
}

