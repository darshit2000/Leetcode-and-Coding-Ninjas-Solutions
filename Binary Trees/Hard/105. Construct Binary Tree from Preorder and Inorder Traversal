/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* helper(vector<int> &preorder, vector<int> &inorder, int preStart, int preEnd, int inStart, int inEnd, unordered_map<int,int> &mpp) {
        if(preStart > preEnd || inStart > inEnd)    return NULL;

        TreeNode* root = new TreeNode(preorder[preStart]);

        int rootPos = mpp[preorder[preStart]];
        int elementsBeforeInorder = mpp[preorder[preStart]] - inStart;

        root->left = helper(preorder, inorder, preStart + 1, preStart + elementsBeforeInorder, inStart, rootPos - 1, mpp);

        root->right = helper(preorder, inorder, preStart + elementsBeforeInorder + 1, preEnd, rootPos + 1, inEnd, mpp);

        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int> mpp;
        for(int i = 0 ; i < inorder.size() ; i++) mpp[inorder[i]] = i;
        return helper(preorder, inorder, 0, preorder.size()-1, 0, inorder.size()-1, mpp);
    }
};
