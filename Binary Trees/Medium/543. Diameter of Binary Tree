/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    int height(TreeNode* root, int &mx) {
        if(!root) return 0;

        int lh = height(root->left, mx);
        int rh = height(root->right, mx);
        mx = max(mx, lh + rh);
        
        return 1 + max(lh, rh);
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(!root) return 0;
        int mx = INT_MIN;
        height(root, mx);
        return mx;
    }
};







// O(n^2)

// class Solution {
// public:
//     int mx = INT_MIN;
//     int height(TreeNode* root) {
//         if(!root) return 0;

//         int lh = height(root->left);
//         int rh = height(root->right);

//         return 1 + max(lh, rh);
//     }
//     int diameterOfBinaryTree(TreeNode* root) {
//         if(!root) return 0;
//         mx = max(mx, height(root->left) + height(root->right));
//         diameterOfBinaryTree(root->left);
//         diameterOfBinaryTree(root->right);
//         return mx;
//     }
// };
