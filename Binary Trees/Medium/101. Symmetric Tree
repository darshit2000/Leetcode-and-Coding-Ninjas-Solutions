/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    bool isMirror(TreeNode* a, TreeNode* b) {
        if(!a && !b) return true;
        else if((a && !b) || (!a && b)) return false;

        return (a->val == b->val) && isMirror(a->left, b->right) && isMirror(a->right, b->left);
    }

    bool isSymmetric(TreeNode* root) {
        return isMirror(root->left, root->right);
    }
};









// class Solution {
// public:
//     void preorder(TreeNode* root, vector<int> &v1) {
//         if(!root) return;

//         v1.push_back(root->val);
//         preorder(root->left, v1);
//         preorder(root->right, v1);
//     }
//     void ultaPreorder(TreeNode* root, vector<int> &v2) {
//         if(!root) return;

//         v2.push_back(root->val);
//         ultaPreorder(root->right, v2);
//         ultaPreorder(root->left, v2);
//     }
//     bool isSymmetric(TreeNode* root) {
//         vector<int> v1,v2;
//         preorder(root, v1);
//         ultaPreorder(root, v2);

//         for(int i : v1) cout << i << ",";
//         cout << "\n";
//         for(int i : v2) cout << i << ",";

//         for(int i = 0 ; i < v1.size() ; i++) {
//             if(v1[i] != v2[i]) return false;
//         }
//         return true;
//     }
// };







// class Solution {
// public:
//     bool isPal(string s) {
//         int n = s.length();
//         if(n == 0 || n == 1) return true;
//         int left = 0;
//         int right = n-1;

//         while(left <= right) {
//             if(s[left] != s[right]) return false;
//             left++;
//             right--;
//         }
//         return true;
//     }
//     bool isSymmetric(TreeNode* root) {
//         queue<TreeNode*> q;
//         q.push(root);

//         while(!q.empty()) {
//             int size = q.size();
//             string temp = "";

//             while(size--) {
//                 TreeNode* curr = q.front();
//                 q.pop();
//                 temp += to_string(curr->val);
//                 if(curr->left) {
//                     q.push(curr->left);
//                 } 
//                 if(curr->right) {
//                     q.push(curr->right);
//                 } 
//             }
//             if(!isPal(temp)) return false;
//         }
//         return true;
//     }
// };
