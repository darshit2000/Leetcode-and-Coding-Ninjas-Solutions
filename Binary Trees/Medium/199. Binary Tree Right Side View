// Right View

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        if(!root) return {};

        vector<int> ans;
        TreeNode* curr = root;
        queue<TreeNode*> q;
        q.push(curr);

        while(!q.empty()) {
            int size = q.size();
            int el;

            while(size--) {
                TreeNode* temp = q.front();
                q.pop();
                el = temp->val;
                if(temp->left) q.push(temp->left);
                if(temp->right) q.push(temp->right);
            }
            ans.push_back(el);
        }
        return ans;
    }
};





// Left View

#include <bits/stdc++.h>

vector<int> printLeftView(BinaryTreeNode<int>* root) {
    // Write your code here.
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    vector<int> ans;

    while(!q.empty()) {
        int size = q.size();
        int el;
        int flag = 0;

        while(size--) {
            BinaryTreeNode<int> *temp = q.front();
            q.pop();
            if(flag == 0) {
                el = temp->data;
                flag = 1;
            }
            if(temp->left) q.push(temp->left);
            if(temp->right) q.push(temp->right);
        }
        ans.push_back(el);
    }
    return ans;
}
