https://leetcode.com/problems/unique-paths/description/



// bottom up with space optimization

// class Solution {
// public:
//     int uniquePaths(int m, int n) {
//         vector<vector<int>> dp(m, vector<int>(n, 0));

//         for(int i = 0 ; i < m ; i++) dp[i][0] = 1;
//         for(int i = 0 ; i < n ; i++) dp[0][i] = 1;

//         for(int i = 1 ; i < m ; i++) {
//             for(int j = 1 ; j < n ; j++) {
//                 dp[i][j] = dp[i-1][j] + dp[i][j-1];
//             }
//         }
//         return dp[m-1][n-1];
//     }
// };




// bottom up

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, 0));

        for(int i = 0 ; i < m ; i++) dp[i][0] = 1;
        for(int i = 0 ; i < n ; i++) dp[0][i] = 1;

        for(int i = 1 ; i < m ; i++) {
            for(int j = 1 ; j < n ; j++) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};



// top down

// class Solution {
// public:
//     int uniquePaths(int m, int n) {
//         vector<vector<int>> dp(m, vector<int>(n, -1));

//         auto solve = [&] (auto& solve, int row, int col) -> int {
//             if(row == 0 || col == 0) return 1;
//             if(row < 0 || col < 0) return 0;
            
//             if(dp[row][col] != -1) return dp[row][col];

//             int p1 = solve(solve, row - 1, col);
//             int p2 = solve(solve, row, col - 1);

//             return dp[row][col] = (p1 + p2);
//         };
        
//         return solve(solve, m-1, n-1);
//     }
// };
