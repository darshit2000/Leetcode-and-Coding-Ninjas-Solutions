https://leetcode.com/problems/triangle/description/



// bottom up with space optimization

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<int> dp(n, 0);
        for(int i = 0 ; i < n ; i++) {
            dp[i] = triangle[n-1][i];
        }

        for(int i = n-2 ; i >= 0 ; i--) {
            vector<int> temp(n, 0);
            for(int j = n-2 ; j >= 0 ; j--) {
                if(i >= j) {
                    temp[j] = min(triangle[i][j] + dp[j], triangle[i][j] + dp[j+1]);
                }
            }
            dp = temp;
        }
        return dp[0];
    }
};




// bottom up

// class Solution {
// public:
//     int minimumTotal(vector<vector<int>>& triangle) {
//         int n = triangle.size();
//         vector<vector<int>> dp(n, vector<int>(n, 0));
//         for(int i = 0 ; i < n ; i++) {
//             dp[n-1][i] = triangle[n-1][i];
//         }

//         for(int i = n-2 ; i >= 0 ; i--) {
//             for(int j = n-2 ; j >= 0 ; j--) {
//                 if(i >= j) {
//                     dp[i][j] = min(triangle[i][j] + dp[i+1][j], triangle[i][j] + dp[i+1][j+1]);
//                 }
//             }
//         }
//         return dp[0][0];
//     }
// };




// top down (starting from [0,0])

// class Solution {
// public:
//     int minimumTotal(vector<vector<int>>& triangle) {
//         int n = triangle.size();
//         vector<vector<int>> dp(n, vector<int>(n, -1));

//         auto solve = [&] (auto& solve, int row, int col) -> int {
//             if(row < col || row >= n || col >= n) return 0;

//             if(dp[row][col] != -1) return dp[row][col];

//             int p1 = triangle[row][col] + solve(solve, row+1, col);
//             int p2 = triangle[row][col] + solve(solve, row+1, col+1);

//             return dp[row][col] = min(p1, p2);
//         };

//         return solve(solve, 0, 0);
//     }
// };





// top down (starting from [n-1,n-1])   Not working

// class Solution {
// public:
//     int minimumTotal(vector<vector<int>>& triangle) {
//         int n = triangle.size();
//         vector<vector<int>> dp(n, vector<int>(n, -1));

//         auto solve = [&] (auto& solve, int row, int col) -> int {
//             if(row < col || row < 0 || col < 0) return 0;
//             if(row == 0 && col == 0) return triangle[0][0];

//             if(dp[row][col] != -1) return dp[row][col];

//             int p1 = triangle[row][col] + solve(solve, row-1, col);
//             int p2 = triangle[row][col] + solve(solve, row-1, col-1);

//             return dp[row][col] = min(p1, p2);
//         };

//         int mn = INT_MAX;
//         for(int i = n-1 ; i >= 0 ; i--) {
//             // maybe different dp array
//             mn = min(mn, solve(solve, n-1, i));
//         }
//         return mn;
//     }
// };
