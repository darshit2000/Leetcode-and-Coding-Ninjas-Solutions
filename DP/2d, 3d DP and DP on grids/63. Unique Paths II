https://leetcode.com/problems/unique-paths-ii/description/



// bottom up with space optimization

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        if(obstacleGrid[0][0] == 1) return 0;

        vector<int> dp(n, 0);

        for(int i = 0 ; i < m ; i++) {
            vector<int> temp(n, 0);
            for(int j = 0 ; j < n ; j++) {
                if(i == 0 && j == 0) {
                    temp[j] = 1;
                    continue;
                }

                if(obstacleGrid[i][j] != 1) {
                    int l = 0, r = 0;
                    if(i > 0) l = dp[j];
                    if(j > 0) r = temp[j-1];
                    temp[j] = l + r;
                }
            }
            dp = temp;
        }
        return dp[n-1];
    }
};



// bottom up

// class Solution {
// public:
//     int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
//         int m = obstacleGrid.size();
//         int n = obstacleGrid[0].size();

//         if(obstacleGrid[0][0] == 1) return 0;

//         vector<vector<int>> dp(m, vector<int>(n, 0));

//         for(int i = 0 ; i < m ; i++) {
//             for(int j = 0 ; j < n ; j++) {
//                 if(i == 0 && j == 0) {
//                     dp[i][j] = 1;
//                     continue;
//                 }

//                 if(obstacleGrid[i][j] != 1) {
//                     int l = 0, r = 0;
//                     if(i > 0) l = dp[i-1][j];
//                     if(j > 0) r = dp[i][j-1];
//                     dp[i][j] = l + r;
//                 }
//             }
//         }
//         return dp[m-1][n-1];
//     }
// };




// top down 

// class Solution {
// public:
//     int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
//         int m = obstacleGrid.size();
//         int n = obstacleGrid[0].size();

//         if(obstacleGrid[0][0] == 1) return 0;

//         vector<vector<int>> dp(m, vector<int>(n, -1));

//         auto solve = [&] (auto& solve, int row, int col) -> int {
//             if(row >= 0 && col >= 0 && obstacleGrid[row][col] == 1) return 0;
//             else if(row == 0 && col == 0) return 1;
//             else if(row < 0 || col < 0) return 0;
            
//             if(dp[row][col] != -1) return dp[row][col];

//             int p1 = solve(solve, row - 1, col);
//             int p2 = solve(solve, row, col - 1);
//             return dp[row][col] = p1 + p2;
//         };

//         return solve(solve, m-1, n-1);
//     }
// };




// bottom up

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        if(obstacleGrid[0][0] == 1) return 0;

        vector<vector<int>> dp(m, vector<int>(n, 0));

        for(int i = 0 ; i < m ; i++) {
            if(obstacleGrid[i][0] == 1) {
                break;
            } 

            dp[i][0] = 1;
        }
        for(int i = 0 ; i < n ; i++) {
            if(obstacleGrid[0][i] == 1) {
                break;
            } 

            dp[0][i] = 1;      
        }

        for(int i = 1 ; i < m ; i++) {
            for(int j = 1 ; j < n ; j++) {
                if(obstacleGrid[i][j] != 1) {
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }
        return dp[m-1][n-1];
    }
};




// top down 

// class Solution {
// public:
//     int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
//         int m = obstacleGrid.size();
//         int n = obstacleGrid[0].size();

//         if(obstacleGrid[0][0] == 1) return 0;

//         int mnrow = -1, mncol = -1;
//         vector<vector<int>> dp(m, vector<int>(n, -1));
//         for(int i = 0 ; i < m ; i++) {
//             if(obstacleGrid[i][0] == 1) {
//                 mnrow = i;
//                 break;
//             }
//         }
//         for(int i = 0 ; i < n ; i++) {
//             if(obstacleGrid[0][i] == 1) {
//                 mncol = i;
//                 break;
//             }
//         }

//         auto solve = [&] (auto& solve, int row, int col) -> int {
//             if(row < 0 || col < 0 || obstacleGrid[row][col] == 1) return 0;
//             else if(mnrow != -1 && row >= mnrow && col == 0) return 0;
//             else if(mncol != -1 && col >= mncol && row == 0) return 0;
//             else if(row == 0 || col == 0) return 1;
            
//             if(dp[row][col] != -1) return dp[row][col];

//             int p1 = solve(solve, row - 1, col);
//             int p2 = solve(solve, row, col - 1);
//             return dp[row][col] = p1 + p2;
//         };

//         return solve(solve, m-1, n-1);
//     }
// };
