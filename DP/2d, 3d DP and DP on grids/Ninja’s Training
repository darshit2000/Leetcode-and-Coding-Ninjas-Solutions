https://www.naukri.com/code360/problems/ninja%E2%80%99s-training_3621003?leftPanelTabValue=PROBLEM



// bottom up with space optimization

int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    vector<int> dp(4, -1);

    dp[0] = max(points[0][1], points[0][2]);
    dp[1] = max(points[0][0], points[0][2]);
    dp[2] = max(points[0][0], points[0][1]);
    dp[3] = max(points[0][0], max(points[0][1], points[0][2]));

    for(int day = 1 ; day < n ; day++) {
        vector<int> temp(4, -1);
        for(int last = 0 ; last <= 3 ; last++) {
            temp[last] = 0;

            for(int task = 0 ; task < 3 ; task++) {
                if(task != last) {
                    temp[last] = max(temp[last], points[day][task] + dp[task]);
                }
            }
        }
        dp = temp;
    }
    return dp[3];
}



// bottom up

// int ninjaTraining(int n, vector<vector<int>> &points)
// {
//     // Write your code here.
//     vector<vector<int>> dp(n, vector<int>(4, -1));

//     dp[0][0] = max(points[0][1], points[0][2]);
//     dp[0][1] = max(points[0][0], points[0][2]);
//     dp[0][2] = max(points[0][0], points[0][1]);
//     dp[0][3] = max(points[0][0], max(points[0][1], points[0][2]));

//     for(int day = 1 ; day < n ; day++) {
//         for(int last = 0 ; last <= 3 ; last++) {
//             dp[day][last] = 0;

//             for(int task = 0 ; task < 3 ; task++) {
//                 if(task != last) {
//                     dp[day][last] = max(dp[day][last], points[day][task] + dp[day - 1][task]);
//                 }
//             }
//         }
//     }
//     return dp[n-1][3];
// }


// top down

// int ninjaTraining(int n, vector<vector<int>> &points)
// {
//     // Write your code here.
//     vector<vector<int>> dp(n, vector<int>(4, -1));
    
//     auto solve = [&] (auto& solve, int day, int last) -> int {
//         if(day == 0) {
//             int mx = 0;
//             for(int i = 0 ; i < 3 ; i++) {
//                 if(i != last) {
//                     mx = max(mx, points[day][i]);
//                 }
//             }
//             return mx;
//         }

//         if(dp[day][last] != -1) return dp[day][last];

//         int mx = 0;
//         int task = 0;

//         for(task = 0 ; task < 3 ; task++) {
//             if(task != last) {
//                 int p = points[day][task] + solve(solve, day - 1, task);
//                 mx = max(mx, p);
//             }
//         }
//         return dp[day][last] = mx;
//     };

//     return solve(solve, n-1, 3);
// }
