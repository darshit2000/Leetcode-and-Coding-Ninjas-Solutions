https://leetcode.com/problems/minimum-path-sum/description/



// bottom up

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        dp[0][0] = grid[0][0];

        for(int i = 1 ; i < m ; i++) {
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }

        for(int i = 1 ; i < n ; i++) {
            dp[0][i] = dp[0][i-1] + grid[0][i];
        }

        for(int i = 1 ; i < m ; i++) {
            for(int j = 1 ; j < n ; j++) {
                dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[m-1][n-1];
    }
};




// top down

// class Solution {
// public:
//     int minPathSum(vector<vector<int>>& grid) {
//         int m = grid.size();
//         int n = grid[0].size();
//         vector<vector<int>> dp(m, vector<int>(n, -1));
        
//         auto solve = [&] (auto& solve, int row, int col) -> int {
//             if(row < 0 || col < 0) return INT_MAX;
//             else if(row == 0 && col == 0) return grid[0][0];

//             if(dp[row][col] != -1) return dp[row][col];

//             dp[row][col] = grid[row][col] + min(solve(solve, row-1, col), solve(solve, row, col-1));
//             return dp[row][col];
//         };
//         return solve(solve, m-1, n-1);
//     }
// };





// dijkstra

// class Solution {
// public:
//     int minPathSum(vector<vector<int>>& grid) {
//         int m = grid.size();
//         int n = grid[0].size();
//         vector<vector<int>> dir = {{0,1},{1,0}};
//         vector<vector<int>> dist(m, vector<int>(n, INT_MAX));
//         using pii = pair<int,pair<int,int>>;

//         priority_queue<pii, vector<pii>, greater<pii>> pq;
//         pq.push({grid[0][0], {0,0}});
//         dist[0][0] = grid[0][0];

//         while(!pq.empty()) {
//             int row = pq.top().second.first;
//             int col = pq.top().second.second;
//             int s = pq.top().first;
//             pq.pop();

//             if(row == m-1 && col == n-1) return s;

//             for(auto& d : dir) {
//                 int nrow = row + d[0];
//                 int ncol = col + d[1];
            
//                 if(nrow >= 0 && nrow < m && ncol >= 0 && ncol < n) {
//                     int ns = s + grid[nrow][ncol];
//                     if(dist[nrow][ncol] > ns) {
//                         dist[nrow][ncol] = ns;
//                         pq.push({ns, {nrow, ncol}});
//                     }
//                 }
//             }
//         }
//         return dist[m-1][n-1];
//     }
// };
