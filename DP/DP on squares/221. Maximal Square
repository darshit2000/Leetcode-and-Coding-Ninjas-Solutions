https://leetcode.com/problems/maximal-square/description/



class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> cache(m, vector<int>(n, 0));
        int mx = 0;

        for(int i = 0 ; i < m ; i++) {
            cache[i][0] = matrix[i][0] - '0';
            mx = max(mx, cache[i][0]);
        }
        for(int j = 1 ; j < n ; j++) {
            cache[0][j] = matrix[0][j] - '0';
            mx = max(mx, cache[0][j]);
        }

        for(int i = 1 ; i < m ; i++) {
            for(int j = 1 ; j < n ; j++) {
                if(matrix[i][j] == '1') {
                    cache[i][j] = 1 + min(cache[i-1][j-1], min(cache[i-1][j], cache[i][j-1]));
                    mx = max(mx, cache[i][j]);
                }
            }
        }
        return mx*mx;
    }
};
