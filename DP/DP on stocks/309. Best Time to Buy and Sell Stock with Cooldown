https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/




// bottom up

// class Solution {
// public:
//     int maxProfit(vector<int>& prices) {
//         int n = prices.size();
//         int dp[n+2][2];

//         for(int i = 0 ; i < n+2 ; i++) {
//             for(int buy = 0 ; buy <= 1 ; buy++) {
//                 dp[i][buy] = 0;
//             }
//         }

//         for(int i = n-1 ; i >= 0 ; i--) {
//             for(int buy = 1 ; buy >= 0 ; buy--) {
//                 int v1 = 0, v2 = 0;
//                 if(buy) {
//                     // sell
//                     v1 = dp[i+2][0] + prices[i];

//                     // not sell
//                     v2 = dp[i+1][1];
//                 } else {
//                     // buy
//                     v1 = dp[i+1][1] - prices[i];

//                     // not buy
//                     v2 = dp[i+1][0];
//                 }
//                 dp[i][buy] = max(v1 ,v2);
//             }
//         }

//         return dp[0][0];
//     }
// };



// top down

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int dp[n][2];

        for(int i = 0 ; i < n ; i++) {
            for(int buy = 0 ; buy <= 1 ; buy++) {
                dp[i][buy] = -1;
            }
        }

        auto f = [&] (auto& f, int i, int buy) -> int {
            if(i >= n) return 0;

            if(dp[i][buy] != -1) return dp[i][buy];

            int v1 = 0, v2 = 0;
            if(buy) {
                // sell
                v1 = f(f, i+2, 0) + prices[i];

                // not sell
                v2 = f(f, i+1, 1);
            } else {
                // buy
                v1 = f(f, i+1, 1) - prices[i];

                // not buy
                v2 = f(f, i+1, 0);
            }
            return dp[i][buy] = max(v1 ,v2);
        };

        return f(f, 0, 0);
    }
};
