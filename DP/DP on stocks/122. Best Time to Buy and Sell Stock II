https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/



// striver bottom up

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int dp[n+1][2];

        for(int i = 0 ; i <= n ; i++) {
            for(int j = 0 ; j < 2 ; j++) {
                dp[i][j] = 0;
            }
        }

        for(int i = n-1 ; i >= 0 ; i--) {
            for(int buy = 1 ; buy >= 0 ; buy--) {
                int v1 = 0, v2 = 0;
                if(buy == 1) {
                    // sell
                    v1 = dp[i+1][0] + prices[i];

                    // not sell
                    v2 = dp[i+1][1];
                } else {
                    // buy
                    v1 = dp[i+1][1] - prices[i];

                    // not buy
                    v2 = dp[i+1][0];
                }
                dp[i][buy] = max(v1, v2);
            }
        }
        return dp[0][0];
    }
};



// striver top down

// class Solution {
// public:
//     int maxProfit(vector<int>& prices) {
//         int n = prices.size();
//         int dp[n][2];

//         for(int i = 0 ; i < n ; i++) {
//             for(int j = 0 ; j < 2 ; j++) {
//                 dp[i][j] = -1;
//             }
//         }

//         auto f = [&] (auto& f, int i, int buy) -> int {
//             if(i >= n) return 0;
//             if(dp[i][buy] != -1) return dp[i][buy];

//             int v1 = 0, v2 = 0;
//             if(buy == 1) {
//                 // sell
//                 v1 = f(f, i+1, 0) + prices[i];

//                 // not sell
//                 v2 = f(f, i+1, 1);
//             } else {
//                 // buy
//                 v1 = f(f, i+1, 1) - prices[i];

//                 // not buy
//                 v2 = f(f, i+1, 0);
//             }
//             return dp[i][buy] = max(v1, v2);
//         };

//         return f(f, 0, 0);
//     }
// };





// bottom up (MLE)

// class Solution {
// public:
//     int maxProfit(vector<int>& prices) {
//         int n = prices.size();
//         // vector<vector<int>> dp(n+2, vector<int>(n+2, 0));
//         int dp[n+2][n+2];

//         for(int i = 0 ; i <= n+1 ; i++) {
//             for(int j = 0 ; j <= n+1 ; j++) {
//                 dp[i][j] = 0;
//             }
//         }

//         for(int i = n-1 ; i >= 0 ; i--) {
//             for(int j = n-1 ; j >= 0 ; j--) {
//                 int v1 = dp[i][j+1];
//                 int v2 = dp[i+1][j+1];
//                 int v3 = prices[j] - prices[i] + dp[j+1][j+2];
//                 dp[i][j] = max(v1, max(v2, v3));
//             }
//         }
//         return dp[0][0];
//     }
// };


// top down (MLE)

// class Solution {
// public:
//     int maxProfit(vector<int>& prices) {
//         int n = prices.size();
//         int dp[n][n];

//         for(int i = 0 ; i < n ; i++) {
//             for(int j = 0 ; j < n ; j++) {
//                 dp[i][j] = -1;
//             }
//         }
//         // vector<vector<int>> dp(n, vector<int>(n, -1));

//         // i -> buy      j -> sell
//         auto f = [&] (auto& f, int i, int j) -> int {
//             if(i >= n || j >= n) return 0;
//             if(dp[i][j] != -1) return dp[i][j];

//             int v1 = f(f, i, j+1);
//             int v2 = f(f, i+1, j+1);
//             int v3 = prices[j] - prices[i] + f(f, j+1, j+2);
//             return dp[i][j] = max(v1, max(v2, v3));
//         };

//         return f(f, 0, 0);
//     }
// };
