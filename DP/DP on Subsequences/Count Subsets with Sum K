https://www.naukri.com/code360/problems/count-subsets-with-sum-k_3952532?leftPanelTabValue=PROBLEM



// bottom up

int findWays(vector<int>& arr, int k)
{
	// Write your code here.
	int n = arr.size();
	vector<vector<int>> dp(n, vector<int>(k+1, 0));
	const int MOD = 1e9 + 7;

	for(int i = 0 ; i < n ; i++) dp[i][0] = 1;

	if(arr[0] <= k) dp[0][arr[0]] += 1;

	for(int i = 1 ; i < n ; i++) {
		for(int sum = 0 ; sum <= k ; sum++) {
			int notTake = dp[i-1][sum];
			int take = 0;
			if(arr[i] <= sum) {
				take = dp[i-1][sum - arr[i]];
			}

			dp[i][sum] = (take + notTake) % MOD; 
		}
	}

	return dp[n-1][k];
}


// top down

// int findWays(vector<int>& arr, int k)
// {
// 	// Write your code here.
// 	int n = arr.size();
// 	vector<vector<int>> dp(n, vector<int>(k+1, -1));
// 	const int MOD = 1e9 + 7;

// 	auto f = [&] (auto& f, int i, int sum) -> int {
// 		if(sum > k) return 0;
// 		if(i == n) {
// 			if(sum == k) return 1;
// 			else return 0;
// 		}

// 		if(dp[i][sum] != -1) return dp[i][sum];

// 		int take = f(f, i+1, sum + arr[i]);
// 		int notTake = f(f, i+1, sum);

// 		return dp[i][sum] =  (take % MOD + notTake % MOD) % MOD;
// 	};

// 	return f(f, 0, 0);
// }
