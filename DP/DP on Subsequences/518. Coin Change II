https://leetcode.com/problems/coin-change-ii/description/



// bottom up with space optimization

// class Solution {
// public:
//     int change(int amount, vector<int>& coins) {
//         int n = coins.size();
//         vector<int> dp(amount+1, 0), temp(amount+1, 0);

//         for(int a = 0 ; a <= amount ; a++) {
//             if(a % coins[0] == 0) {
//                 dp[a] = 1;
//             }
//         }

//         for(int i = 1 ; i < n ; i++) {
//             for(int a = 0 ; a <= amount ; a++) {
//                 int take = 0;
//                 if(a - coins[i] >= 0) take = temp[a - coins[i]];

//                 int notTake = dp[a];

//                 temp[a] = take + notTake;
//             }
//             dp = temp;
//         }

//         return dp[amount];
//     }
// };


// bottom up

// class Solution {
// public:
//     int change(int amount, vector<int>& coins) {
//         int n = coins.size();
//         vector<vector<int>> dp(n, vector<int>(amount+1, 0));

//         for(int a = 0 ; a <= amount ; a++) {
//             if(a % coins[0] == 0) {
//                 dp[0][a] = 1;
//             }
//         }

//         for(int i = 1 ; i < n ; i++) {
//             for(int a = 0 ; a <= amount ; a++) {
//                 int take = 0;
//                 if(a - coins[i] >= 0) take = dp[i][a - coins[i]];

//                 int notTake = dp[i-1][a];

//                 dp[i][a] = take + notTake;
//             }
//         }

//         return dp[n-1][amount];
//     }
// };



// top down

class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int>(amount+1, -1));

        auto f = [&] (auto& f, int i, int remaining) -> int {
            if(i == 0) {
                if(remaining % coins[0] == 0) return 1;
                else return 0;
            }

            if(dp[i][remaining] != -1) return dp[i][remaining];

            int take = 0;
            if(remaining - coins[i] >= 0) take = f(f, i, remaining - coins[i]);

            int notTake = f(f, i-1, remaining);

            return dp[i][remaining] = take + notTake;
        };

        return f(f, n-1, amount);
    }
};
