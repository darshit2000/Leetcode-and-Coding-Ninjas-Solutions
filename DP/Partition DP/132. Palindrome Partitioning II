https://leetcode.com/problems/palindrome-partitioning-ii/description/



// code similar to palindrome partitioning 1

class Solution {
public:
    bool isPalindrome(string &s, int start, int end, vector<vector<int>> &palindromeDP) {
        if(start > end) return true;

        if(palindromeDP[start][end] != -1) return palindromeDP[start][end];

        if(s[start] == s[end]) {
            return palindromeDP[start][end] = isPalindrome(s, start+1, end-1, palindromeDP);
        }
        return palindromeDP[start][end] = false;
    }
    int minCut(string s) {
        int n = s.length();
        vector<int> dp(n, -1);
        vector<vector<int>> palindromeDP(n, vector<int>(n, -1));

        auto f = [&] (auto& f, int i) -> int {
            if(i == n) return 0;

            if(dp[i] != -1) return dp[i];
            
            int minCost = INT_MAX, cost = 0;
            
            for(int idx = i ; idx < n ; idx++) {
                if(isPalindrome(s, i, idx, palindromeDP)) {
                    cost = 1 + f(f, idx + 1);
                }
                minCost = min(cost, minCost);
            }

            return dp[i] = minCost;
        };
3
        return f(f, 0) - 1;
    }
};



// not working

// class Solution {
// public:
//     bool isPalindrome(string &s) {
//         if(s.length() == 0) return false;
//         return s == string(s.rbegin(), s.rend());
//     }
//     int minCut(string s) {
//         int n = s.length();
//         vector<int> dp(n, -1);

//         auto f = [&] (auto& f, int i, string t) -> int {
//             if(i == n) {
//                 // t += s[n-1];
//                 if(isPalindrome(t)) return 1;
//                 return INT_MAX;
//             }

//             if(dp[i] != -1) return dp[i];
            
//             int v1 = INT_MAX, v2 = INT_MAX;
//             t += s[i];

//             if(isPalindrome(t)) {
//                 v1 = 1 + f(f, i+1, "");
//             }
            
//             v2 = f(f, i+1, t);

//             return dp[i] = min(v1, v2);
//         };

//         return f(f, 0, "") - 1;
//     }
// };
