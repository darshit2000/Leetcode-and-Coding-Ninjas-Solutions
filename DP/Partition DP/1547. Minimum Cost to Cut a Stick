https://leetcode.com/problems/minimum-cost-to-cut-a-stick/description/



// method 1

class Solution {
public:
    int minCost(int n, vector<int>& cuts) {
        int m = cuts.size();
        sort(cuts.begin(), cuts.end());
        vector<vector<int>> dp(m, vector<int>(m, -1));

        auto f = [&] (auto& f, int left, int right, int cutsI, int cutsJ) -> int {
            if(cutsI > cutsJ) return 0;

            if(dp[cutsI][cutsJ] != -1) return dp[cutsI][cutsJ];

            int ans = INT_MAX;
            for(int k = cutsI ; k <= cutsJ ; k++) {
                int cost = right-left + f(f, left, cuts[k], cutsI, k-1) + f(f, cuts[k], right, k+1, cutsJ);
                ans = min(ans, cost);
            }
            return dp[cutsI][cutsJ] = ans;
        };
        return f(f, 0, n, 0, m-1);
    }
};




// method 2  (top down)

// class Solution {
// public:
//     int minCost(int n, vector<int>& cuts) {
//         ios::sync_with_stdio(NULL);
//         cin.tie(NULL);
//         cout.tie(NULL);

//         cuts.push_back(0);
//         cuts.push_back(n);
//         sort(cuts.begin(), cuts.end());
//         int m = cuts.size();
//         vector<vector<int>> dp(m, vector<int>(m, -1));

//         auto f = [&] (auto& f, int i, int j) -> int {
//             if(j - i + 1 < 3) return 0;

//             if(dp[i][j] != -1) return dp[i][j];

//             int ans = INT_MAX;

//             for(int k = i+1 ; k < j ; k++) {
//                 int cost = cuts[j] - cuts[i] + f(f, i, k) + f(f, k, j);
//                 ans = min(ans, cost);
//             }
//             return dp[i][j] = ans;
//         };
//         return f(f, 0, m-1);
//     }
// };


// method 2  (bottomn up)

// class Solution {
// public:
//     int minCost(int n, vector<int>& cuts) {
//         ios::sync_with_stdio(NULL);
//         cin.tie(NULL);
//         cout.tie(NULL);

//         cuts.push_back(0);
//         cuts.push_back(n);
//         sort(cuts.begin(), cuts.end());
//         int m = cuts.size();
//         vector<vector<int>> dp(m, vector<int>(m, 0));

//         for(int i = m-1 ; i >= 0 ; i--) {
//             // can also use for(int j = i+2 ; j < m ; j++) {
//             for(int j = 0 ; j < m ; j++) {
//                 if(j-i+1 >= 3) {
//                 // 0    c1    n   (atleast 1 cut required in between)

//                     int ans = INT_MAX;
//                     for(int k = i+1 ; k < j ; k++) {
//                         int cost = cuts[j] - cuts[i] + dp[i][k] + dp[k][j];
//                         ans = min(ans, cost);
//                     }
//                     dp[i][j] = ans;
//                 }
//             }
//         }
//         return dp[0][m-1];
//     }
// };
