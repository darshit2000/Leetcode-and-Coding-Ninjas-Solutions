https://leetcode.com/problems/wildcard-matching/description/



// bottom up

class Solution {
public:
    bool isMatch(string s, string p) {
        int n = s.length();
        int m = p.length();
        vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));

        dp[n][m] = true;
        for(int j = m-1 ; j >= 0 ; j--) {
            if(p[j] == '*') dp[n][j] = true;
            else break;
        }
        
        for(int i = n-1 ; i >= 0 ; i--) {
            for(int j = m-1 ; j >= 0 ; j--) {
                if(s[i] == p[j] || p[j] == '?') {
                    dp[i][j] = dp[i+1][j+1];
                } else {
                    if(p[j] == '*') {
                        dp[i][j] = (dp[i+1][j] | dp[i+1][j+1] | dp[i][j+1]);
                    }
                }
            }
        }
        return dp[0][0];
    }
};



// top down

// class Solution {
// public:
//     bool isMatch(string s, string p) {
//         int n = s.length();
//         int m = p.length();
//         vector<vector<int>> dp(n, vector<int>(m, -1));

//         auto f = [&] (auto& f, int i, int j) -> bool {
//             if(i == n) {
//                 if(j == m) return true;
                
//                 for(int k = j ; k < m ; k++) {
//                     if(p[k] != '*') return false;
//                 }
//                 return true;
//             }
            
//             if(j == m) return false;

//             if(dp[i][j] != -1) return dp[i][j]; 

//             if(s[i] == p[j] || p[j] == '?') {
//                 return dp[i][j] = f(f, i+1, j+1);
//             } else {
//                 if(p[j] == '*') {
//                     return dp[i][j] = (f(f, i+1, j) | f(f, i+1, j+1) | f(f, i, j+1));
//                 }
//             }
//             return dp[i][j] = false;
//         };

//         return f(f, 0, 0);
//     }
// };
