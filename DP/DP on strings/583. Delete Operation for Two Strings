https://leetcode.com/problems/delete-operation-for-two-strings/description/



// striver
// Keep the Longest Common Subsequence in both the string as it is, and then delete the rest

class Solution {
public:
    int LCSLength(string s, string t) {
        int n = s.length();
        int m = t.length();
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));

        for(int i = 1 ; i <= n ; i++) {
            for(int j = 1 ; j <= m ; j++) {
                if(s[i-1] == t[j-1]) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                } else{
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
    int minDistance(string word1, string word2) {
        int n = word1.length();
        int m = word2.length();
        return (n - LCSLength(word1, word2)) + (m - LCSLength(word1, word2));
    }
};



// bottom up

// class Solution {
// public:
//     int minDistance(string word1, string word2) {
//         int n = word1.length();
//         int m = word2.length();
//         vector<vector<int>> dp(n+1, vector<int>(m+1, 0));

//         for(int i = 0 ; i < n ; i++) {
//             dp[i][m] = n-i;
//         }
//         for(int j = 0 ; j < m ; j++) {
//             dp[n][j] = m-j;
//         }

//         for(int i = n-1 ; i >= 0 ; i--) {
//             for(int j = m-1; j >= 0 ; j--) {
//                 if(word1[i] == word2[j]) {
//                     dp[i][j] = dp[i+1][j+1];
//                 } else {
//                     int v1 = 1 + dp[i+1][j];
//                     int v2 = 1 + dp[i][j+1];
//                     dp[i][j] = min(v1, v2);
//                 }
//             }
//         }
//         return dp[0][0];
//     }
// };




// top down

// class Solution {
// public:
//     int minDistance(string word1, string word2) {
//         int n = word1.length();
//         int m = word2.length();
//         vector<vector<int>> dp(n, vector<int>(m, -1));

//         auto f = [&] (auto& f, int i, int j) -> int {
//             if(i == n || j == m) {
//                 if(i < n) return n-i;
//                 else return m-j;
//             }

//             if(dp[i][j] != -1) return dp[i][j];

//             if(word1[i] == word2[j]) {
//                 return dp[i][j] = f(f, i+1, j+1);
//             } else {
//                 int v1 = 1 + f(f, i+1, j);
//                 int v2 = 1 + f(f, i, j+1);
//                 return dp[i][j] = min(v1, v2);
//             }
//         };

//         return f(f, 0, 0);
//     }
// };
