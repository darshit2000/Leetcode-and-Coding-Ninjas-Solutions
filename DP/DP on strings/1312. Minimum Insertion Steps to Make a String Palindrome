https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/



// bottom up

class Solution {
public:
    int minInsertions(string s) {
        int n = s.length();
        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));

        for(int i = n ; i >= 1 ; i--) {
            for(int j = 1; j <= n ; j++) {
                if(i < j) {
                    int v1 = 1e9, v2 = 1e9, v3 = 1e9;
                    if(s[i-1] == s[j-1]) {
                        v1 = dp[i+1][j-1];
                    } else {
                        v2 = 1 + dp[i+1][j];
                        v3 = 1 + dp[i][j-1];
                    }
                    dp[i][j] = min(v1 ,min(v2, v3));
                }
            }
        }
        return dp[1][n];
    }
};



// top down

// class Solution {
// public:
//     int minInsertions(string s) {
//         int n = s.length();
//         vector<vector<int>> dp(n, vector<int>(n, -1));
        
//         auto f = [&] (auto& f, int i, int j) -> int {
//             if(i >= j) return 0;

//             if(dp[i][j] != -1) return dp[i][j];

//             int v1 = 1e9, v2 = 1e9, v3 = 1e9;
//             if(s[i] == s[j]) {
//                 v1 = f(f, i+1, j-1);
//             } else {
//                 v2 = 1 + f(f, i+1, j);
//                 v3 = 1 + f(f, i, j-1);
//             }
//             return dp[i][j] = min(v1 ,min(v2, v3));
//         };

//         return f(f, 0, n-1);
//     }
// };
