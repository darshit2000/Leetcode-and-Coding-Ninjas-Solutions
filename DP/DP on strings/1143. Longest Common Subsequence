https://leetcode.com/problems/longest-common-subsequence/description/



// bottom up with space optimization

// class Solution {
// public:
//     int longestCommonSubsequence(string text1, string text2) {
//         int n = text1.length();
//         int m = text2.length();
//         vector<int> dp(m, 0), temp(m, 0);

//         for(int i = 0 ; i < n ; i++) {
//             for(int j = 0 ; j < m ; j++) {
//                 int v1 = 0, v2 = 0, v3 = 0;

//                 if(text1[i] == text2[j]) {
//                     int tmp = (i >= 1 && j >= 1) ? dp[j-1] : 0;
//                     v1 = 1 + tmp;
//                 }
//                 v2 = (i >= 1) ? dp[j] : 0;
//                 v3 = (j >= 1) ? temp[j-1] : 0;

//                 temp[j] = max(v1, max(v2, v3));
//             }
//             dp = temp;
//         }
//         return dp[m-1];
//     }
// };



// bottom up

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        int i, j;

        for(i = 1 ; i <= n ; i++) {
            for(j = 1 ; j <= m ; j++) {

                if(text1[i-1] == text2[j-1]) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                } else {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
};


// top down

// class Solution {
// public:
//     int longestCommonSubsequence(string text1, string text2) {
//         int n = text1.length();
//         int m = text2.length();
//         vector<vector<int>> dp(n, vector<int>(m, -1));

//         auto f = [&] (auto& f, int i, int j) -> int {
//             if(i == -1 || j == -1) return 0;

//             if(dp[i][j] != -1) return dp[i][j];

//             int v1 = 0, v2 = 0, v3 = 0;

//             if(text1[i] == text2[j]) {
//                 v1 = 1 + f(f, i-1, j-1);
//             }
//             v2 = f(f, i-1, j);
//             v3 = f(f, i, j-1);

//             return dp[i][j] = max(v1, max(v2, v3));
//         };

//         return f(f, n-1, m-1);
//     }
// };
