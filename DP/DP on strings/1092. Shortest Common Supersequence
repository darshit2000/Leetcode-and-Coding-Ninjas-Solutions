https://leetcode.com/problems/shortest-common-supersequence/description/



// striver -> Find LCS table and then apply the "print LCS" thing, 
// but this time, when we go to (i-1,j) or (i, j-1), then also, we will take the char in our ans

class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int n = str1.length();
        int m = str2.length();
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        string ans = "";

        for(int i = 1 ; i <= n ; i++) {
            for(int j = 1 ; j <= m ; j++) {
                if(str1[i-1] == str2[j-1]) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                } 
                else {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }

        // Length of the shortest common subsequence (SCS) = n + m - (lenngth of LCS).
        // Because the char which are common in both strings will be taken once in SCS,
        // and the char which are different in both the strings will be taken as they are.
        // Total number of common char in both the strings = Length of the LCS

        int i = n, j = m;
        while(i > 0 && j > 0) {
            if(str1[i-1] == str2[j-1]) {
                ans += str1[i-1];
                i--;
                j--;
            } else {
                if(dp[i-1][j] > dp[i][j-1]) {
                    ans += str1[i-1];
                    i--;
                } else {
                    ans += str2[j-1];
                    j--;
                }
            }
        }

        while(i > 0) {
            ans += str1[i-1];
            i--;
        }

        while(j > 0) {
            ans += str2[j-1];
            j--;
        }

        reverse(ans.begin(), ans.end());
        return ans;
    }
};





// bottom up (MLE)

// class Solution {
// public:
//     string shortestCommonSupersequence(string str1, string str2) {
//         int n = str1.length();
//         int m = str2.length();
//         vector<vector<string>> dp(n+1, vector<string>(m+1, ""));

//         string t1 = str1;
//         for(int i = 0 ; i < n ; i++) {
//             dp[i][m] = t1;
//             t1.erase(t1.begin());
//         }
//         string t2 = str2;
//         for(int j = 0 ; j < m ; j++) {
//             dp[n][j] = t2;
//             t2.erase(t2.begin());
//         }

//         for(int i = n-1 ; i >= 0 ; i--) {
//             for(int j = m-1 ; j >= 0 ; j--) {
//                 if(str1[i] == str2[j]) {
//                     dp[i][j] = str1[i] + dp[i+1][j+1];
//                 } else {
//                     string s2 = str1[i] + dp[i+1][j];
//                     string s3 = str2[j] + dp[i][j+1];

//                     if(s2.length() < s3.length()) dp[i][j] = s2;
//                     else dp[i][j] = s3;
//                 }
//             }
//         }
//         return dp[0][0];
//     }
// };




// top down (MLE)

// class Solution {
// public:
//     string shortestCommonSupersequence(string str1, string str2) {
//         int n = str1.length();
//         int m = str2.length();
//         vector<vector<string>> dp(n, vector<string>(m, "-1"));

//         auto f = [&] (auto& f, int i, int j) -> string {
//             if(i == n || j == m) {
//                 if(i < n) {
//                     return str1.substr(i, n-i); 
//                 } else if(j < m) {
//                     return str2.substr(j, m-j);
//                 } else return "";
//             }

//             if(dp[i][j] != "-1") return dp[i][j];

//             string s1 = "", s2 = "", s3 = "";

//             if(str1[i] == str2[j]) {
//                 s1 = str1[i] + f(f, i+1, j+1);
//                 return dp[i][j] = s1;
//             } else {
//                 s2 = str1[i] + f(f, i+1, j);
//                 s3 = str2[j] + f(f, i, j+1);

//                 if(s2.length() < s3.length()) return dp[i][j] = s2;
//                 else return dp[i][j] = s3;
//             }
//         };

//         return f(f, 0, 0);
//     }
// };

