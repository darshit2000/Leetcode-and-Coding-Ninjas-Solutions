https://www.naukri.com/code360/problems/print-longest-common-subsequence_8416383?leftPanelTabValue=PROBLEM



// backtracking using while loop

string findLCS(int n, int m,string &s1, string &s2){
	// Write your code here.	
	vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
	string ans = "";

	for(int i = 1 ; i <= n ; i++) {
		for(int j = 1; j <= m ; j++) {
			if(s1[i-1] == s2[j-1]) {
				dp[i][j] = 1 + dp[i-1][j-1];
			} else {
				dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
			}
		}
	};

	int i = n, j = m;

	while(i > 0 && j > 0) {
		if(s1[i-1] == s2[j-1]) {
			ans = s1[i-1] + ans;
			i--;
			j--;
		} else if(dp[i-1][j] > dp[i][j-1]) {
			i--;
		} else if(dp[i][j-1] >= dp[i-1][j]) {
			j--;
		}
	}
	
	return ans;
}




// backtracking using recursion

// string findLCS(int n, int m,string &s1, string &s2){
// 	// Write your code here.	
// 	vector<vector<int>> dp(n+1, vector<int>(m+1, 0));

// 	for(int i = 1 ; i <= n ; i++) {
// 		for(int j = 1; j <= m ; j++) {
// 			if(s1[i-1] == s2[j-1]) {
// 				dp[i][j] = 1 + dp[i-1][j-1];
// 			} else {
// 				dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
// 			}
// 		}
// 	}

// 	auto f = [&] (auto& f, int i, int j, string &ans) -> bool {
// 		if(i == 0 || j == 0) {
// 			return true;
// 		}

// 		if(i-1 >= 0 && j-1 >= 0 && s1[i-1] == s2[j-1]) {
// 			ans = s1[i-1] + ans;
// 			if(f(f, i-1, j-1, s)) return true;
// 		} 
// 		else {
// 			if(i-1 >= 0 && dp[i-1][j] == dp[i][j]) {
// 				if(f(f, i-1, j, s)) return true;
// 			}

// 			if(j-1 >= 0 && dp[i][j-1] == dp[i][j]) {
// 				if(f(f, i, j-1, s)) return true;
// 			}
// 		}
// 	};

// 	string ans;
// 	f(f, n, m, ans);
// 	return ans;
// }



// first try

// string findLCS(int n, int m,string &s1, string &s2){
// 	// Write your code here.	
// 	vector<vector<int>> dp(n+1, vector<int>(m+1, 0));

// 	for(int i = 1 ; i <= n ; i++) {
// 		for(int j = 1; j <= m ; j++) {
// 			if(s1[i-1] == s2[j-1]) {
// 				dp[i][j] = 1 + dp[i-1][j-1];
// 			} else {
// 				dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
// 			}
// 		}
// 	}

// 	auto f = [&] (auto& f, int i, int j, string &ans) -> bool {
// 		if(i == 0 || j == 0) {
// 			return true;
// 		}

// 		if(i-1 >= 0 && dp[i][j] == dp[i-1][j]) {
// 			if(f(f, i-1, j, ans)) return true;
// 		}

// 		if(j-1 >= 0 && dp[i][j] == dp[i][j-1]) {
// 			if(f(f, i, j-1, ans)) return true;
// 		}

// 		if(i-1 >= 0 && j-1 >= 0 && dp[i][j] == 1 + dp[i-1][j-1]) {
// 			ans = s1[i-1] + ans;
// 			if(f(f, i-1, j-1, ans)) return true;
// 		}
// 	};

// 	string ans;
// 	f(f, n, m, ans);
// 	return ans;
// }
