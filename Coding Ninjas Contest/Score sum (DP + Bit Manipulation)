https://www.naukri.com/code360/contests/weekly-contest-122/12659448/problems/31001?leftPanelTabValue=PROBLEM



#define ll long long

// DP

// long long scoreSum(int n, vector<int> &a) {
//     vector<int> dp(n, INT_MAX);
//     long long ans = 0LL;

//     for(int i = 0 ; i < n ; i++) {
//         dp[i] = a[i];
//         for(int bit = 0; bit < 20 ; bit++) {
//             if((i >> bit) & 1) {
//                 int toggledNum = (i ^ (1 << bit));
//                 dp[i] = min(dp[i], dp[toggledNum]);
//             }
//         }
//         ans += (1LL * a[i] * 1LL * dp[i]);
//     }
//     return ans;
// }



// Memoization

// long long scoreSum (int n, vector <int> &a) {
//     // Write your code here.
//     vector<int> dp(n, INT_MAX);
//     ll sum = 0LL;

//     for(int i = 0 ; i < n ; i++) {

//         auto getMin = [&] (auto& getMin, int idx) -> int {
//             if(idx == 0) return a[0];

//             if(dp[idx] != INT_MAX) return dp[idx];

//             int mn = a[idx];
//             for(int bit = 0 ; bit < 20 ; bit++) {
//                 if((idx >> bit) & 1) {
//                     int toggled = (i ^ (1<<bit));
//                     mn = min(mn, getMin(getMin, toggled));
//                 }
//             }
//             return dp[idx] = mn;
//         };

//         sum += (1LL * a[i] * 1LL * getMin(getMin, i));
//     }

//     return sum;
// }





// Backtracking / Recursion

void getAllJ(int i, int &mn, vector<int> &a) {
    if(i == 0) return;
    
    int n = (int)log2(i) + 1;
    for(int bit = 0 ; bit < n ; bit++) {
        if((i & (1<<bit)) != 0) {
            // unset the "bit"th bit in i
            i = (i & ~(1<<bit));
            mn = min(mn, a[i]);
            getAllJ(i, mn, a);
            // set the "bit"th bit in i
            i = (i | (1<<bit));
        }
    }
}

long long scoreSum (int n, vector <int> &a) {
    // Write your code here.
    vector<ll> score(n, INT_MAX);
    ll sum = 0LL;

    for(int i = 0 ; i < n ; i++) {
        int mn = a[i];
        getAllJ(i, mn, a);
        
        sum += (1LL * a[i] * 1LL * mn);
    }

    return sum;
}
