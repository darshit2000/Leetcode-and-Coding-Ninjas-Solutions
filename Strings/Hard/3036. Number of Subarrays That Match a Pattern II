class Solution {
public:
    int countMatchingSubarrays(vector<int>& nums, vector<int>& pattern) {
        int n = nums.size();
        int p = pattern.size();
        int count = 0;
        string text = "";
        string patt = "";
        
        for(int i = 0 ; i < n-1 ; i++) {
            if(nums[i] < nums[i+1]) text += 'a';
            else if(nums[i] == nums[i+1]) text += 'e';
            else text += 'd';
        }
        
        for(int i = 0 ; i < p ; i++) {
            if(pattern[i] == 1) patt += 'a';
            else if(pattern[i] == 0) patt += 'e';
            else patt += 'd';
        }
        
        string newString = patt + "#" + text;
        vector<int> lps(newString.length(), 0);
        
        for(int i = 1 ; i < newString.length() ; i++) {
            int prevIndex = lps[i-1];
            
            while(prevIndex > 0 && newString[prevIndex] != newString[i]) {
                prevIndex = lps[prevIndex - 1];
            }
            
            lps[i] = prevIndex + (newString[prevIndex] == newString[i] ? 1 : 0);
        }
        
        for(int i = p ; i < newString.length() ; i++) {
            if(lps[i] == p) count++;
        }
            
        return count;
    }
};
