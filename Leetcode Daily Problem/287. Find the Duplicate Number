https://leetcode.com/problems/find-the-duplicate-number/description/?envType=daily-question&envId=2024-03-24


// Floyd Tortoise hare (Linked List cycle detection)    (Neetcode video)
// O(1) space (not modifying the original array)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        int slow = 0;
        int fast = 0;

        while(true) {
            slow = nums[slow];
            fast = nums[nums[fast]];

            if(slow == fast) break;
        }

        int slow2 = 0;
        while(true) {
            slow = nums[slow];
            slow2 = nums[slow2];

            if(slow == slow2) return slow;
        }
        return -1;
    }
};





// O(1) space
// But modifying the original array, but can revert back the original array by turning all values as positive

// class Solution {
// public:
//     int findDuplicate(vector<int>& nums) {
//         int n = nums.size();
//         for(int i = 0 ; i < n ; i++) {
//             int index = abs(nums[i]);
//             if(nums[index] < 0) return index;

//             nums[index] *= -1;
//         }
//         return -1;
//     }
// };







// O(n) space

// class Solution {
// public:
//     int findDuplicate(vector<int>& nums) {
//         int n = nums.size();
//         vector<int> v(n, 0);
//         for(int i : nums) {
//             if(v[i] > 0) return i;
//             else v[i]++;
//         }
//         return -1;
//     }
// };
