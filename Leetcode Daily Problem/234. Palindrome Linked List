https://leetcode.com/problems/palindrome-linked-list/description/?envType=daily-question&envId=2024-03-22


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head || !head->next) return head;

        ListNode* newHead = reverseList(head->next);

        head->next->next = head;
        head->next = NULL;

        return newHead;
    }
    bool isPalindrome(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* second = NULL;
        ListNode* first = head;

        while(fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        if(!fast) second = reverseList(slow);
        else second = reverseList(slow->next);

        while(first && second) {
            if(first->val != second->val) return false;
            first = first->next;
            second = second->next;
        }
        return true;
    }
};
