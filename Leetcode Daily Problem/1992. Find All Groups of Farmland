https://leetcode.com/problems/find-all-groups-of-farmland/description/?envType=daily-question&envId=2024-04-20



// using nested for loops

class Solution {
public:
    vector<vector<int>> findFarmland(vector<vector<int>>& land) {
        int m = land.size();
        int n = land[0].size();
        vector<vector<int>> ans;
        int lbx, lby, gbx, gby;

        for(int i = 0 ; i < m ; i++) {
            for(int j = 0 ; j < n ; j++) {
                if(land[i][j] == 1) {
                    lbx = i, lby = j, gbx = i, gby = j;

                    while(gbx < m && land[gbx][j] == 1) gbx++;
                    gbx--;

                    while(gby < n && land[i][gby] == 1) gby++;
                    gby--;

                    ans.push_back({lbx, lby, gbx, gby});

                    for(int k = i ; k <= gbx ; k++) {
                        for(int l = j ; l <= gby ; l++) {
                            land[k][l] = 2;
                        }
                    }
                }
            }
        }
        return ans;
    }
};



// not using visited and making change in land[][] itself, also removing the temp array

// class Solution {
// public:
//     vector<vector<int>> findFarmland(vector<vector<int>>& land) {
//         int m = land.size();
//         int n = land[0].size();
//         vector<vector<int>> dir = {{0,1}, {1,0}};
//         vector<vector<int>> ans;
//         int lbx, lby, gbx, gby;

//         auto dfs = [&] (auto& dfs, int row, int col) -> void {
//             land[row][col] = 2;

//             for(auto &d : dir) {
//                 int nrow = row + d[0];
//                 int ncol = col + d[1];

//                 if(nrow >= 0 && nrow < m && ncol >= 0 && ncol < n && land[nrow][ncol] == 1) {
//                     if(nrow > gbx || ncol > gby) {
//                         gbx = nrow;
//                         gby = ncol;
//                     }
//                     dfs(dfs, nrow, ncol);
//                 } 
//             }
//         };

//         for(int i = 0 ; i < m ; i++) {
//             for(int j = 0 ; j < n ; j++) {
//                 if(land[i][j] == 1) {
//                     lbx = i, lby = j, gbx = i, gby = j;
//                     dfs(dfs, i, j);
//                     ans.push_back({lbx, lby, gbx, gby});
//                 }
//             }
//         }
//         return ans;
//     }
// };




// using visited array

// class Solution {
// public:
//     vector<vector<int>> findFarmland(vector<vector<int>>& land) {
//         int m = land.size();
//         int n = land[0].size();
//         vector<vector<int>> vis(m, vector<int>(n, 0));
//         vector<vector<int>> dir = {{0,1}, {1,0}};
//         vector<vector<int>> ans;
//         int x, y;

//         auto dfs = [&] (auto& dfs, int row, int col) -> void {
//             vis[row][col] = 1;

//             for(auto &d : dir) {
//                 int nrow = row + d[0];
//                 int ncol = col + d[1];

//                 if(nrow >= 0 && nrow < m && ncol >= 0 && ncol < n && vis[nrow][ncol] == 0 && land[nrow][ncol] == 1) {
//                     if(nrow > x || ncol > y) {
//                         x = nrow;
//                         y = ncol;
//                     }
//                     dfs(dfs, nrow, ncol);
//                 } 
//             }
//         };

//         for(int i = 0 ; i < m ; i++) {
//             for(int j = 0 ; j < n ; j++) {
//                 if(land[i][j] == 1 && vis[i][j] == 0) {
//                     vector<int> temp;
//                     temp.push_back(i);
//                     temp.push_back(j);
//                     x = i;
//                     y = j;
//                     dfs(dfs, i, j);
//                     temp.push_back(x);
//                     temp.push_back(y);
//                     ans.push_back(temp);
//                 }
//             }
//         }
//         return ans;
//     }
// };
