https://leetcode.com/problems/minimum-height-trees/description/?envType=daily-question&envId=2024-04-23



class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if(n == 1) return {0};
        using pii = pair<int, pair<int,int>>;
        unordered_map<int, vector<int>> adj;
        vector<int> ans;
        vector<int> deg(n, 0);
        vector<int> valid(n, 1);
        int steps = 0, mn = INT_MAX;
        queue<int> q;

        for(auto& e : edges) {
            int u = e[0], v = e[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
            deg[u]++;
            deg[v]++;
        }

        for(int i = 0 ; i < n ; i++) {
            if(deg[i] == 1) {
                q.push(i);
            }
        }

        int remaining = n;
        while(remaining > 2) {
            int sz = q.size();
            remaining -= sz;

            while(sz--) {
                int node = q.front();
                q.pop();
                valid[node] = 0;

                for(int child : adj[node]) {
                    deg[child]--;
                    if(deg[child] == 1) q.push(child);
                }
            }
        }
        // for(int i = 0 ; i < n ; i++) {
        //     if(valid[i] == 1) ans.push_back(i);
        // }
        while(!q.empty()) {
            ans.push_back(q.front());
            q.pop();
        }
        return ans;
    }
};




// recursion (TLE)

// class Solution {
// public:
//     vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
//         using pii = pair<int, pair<int,int>>;
//         vector<vector<int>> adj(n);
//         vector<vector<int>> ans(n);
//         queue<pii> q;
//         int steps = 0, mn = INT_MAX;
//         vector<unordered_map<int,int>> dp(n);

//         for(auto& e : edges) {
//             adj[e[0]].push_back(e[1]);
//             adj[e[1]].push_back(e[0]);
//         }

//         auto f = [&] (auto& f, int root, int parent) -> int {
//             if(dp[root].count(parent)) return dp[root][parent];

//             int mx = 0;
//             for(int child : adj[root]) {
//                 if(child != parent) {
//                     mx = max(mx, 1 + f(f, child, root));
//                 }
//             } 
//             return dp[root][parent] = mx;
//         };

//         for(int i = 0 ; i < n ; i++) {
//             int h = f(f, i, n);
//             mn = min(mn, h);
//             ans[h].push_back(i);
//         }
//         return ans[mn];
//     }
// };
