https://leetcode.com/problems/smallest-string-starting-from-leaf/description/?envType=daily-question&envId=2024-04-17



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// getting string in the traversal itself

class Solution {
public:
    bool isLeaf(TreeNode* node) {
        if(node && !node->left && !node->right) return true;
        return false;
    }
    string smallestFromLeaf(TreeNode* root) {
        string ans = "";

        auto traversal = [&] (auto& traversal, TreeNode* node, string s) -> void {

            s += string(1, node->val + 'a');

            if(isLeaf(node)) {
                reverse(s.begin(), s.end());
                if(ans.length() == 0 || ans > s) {
                    ans = s;
                }
                return;
            }

            if(node->left) {
                traversal(traversal, node->left, s);
            }
            if(node->right) {
                traversal(traversal, node->right, s);
            }

        };
        traversal(traversal, root, "");

        return ans;
    }
};



// storing parent as well as the leaves and then at the last, I am traversing all the leaves

// class Solution {
// public:
//     bool isLeaf(TreeNode* node) {
//         if(node && !node->left && !node->right) return true;
//         return false;
//     }
//     string smallestFromLeaf(TreeNode* root) {
//         unordered_map<TreeNode*, TreeNode*> parent;
//         vector<TreeNode*> leaves;
//         parent[root] = new TreeNode(-1);

//         auto traversal = [&] (auto& traversal, TreeNode* node) -> void {
//             if(!node) return;

//             if(node->left) {
//                 traversal(traversal, node->left);
//                 parent[node->left] = node;
//             }
//             if(node->right) {
//                 traversal(traversal, node->right);
//                 parent[node->right] = node;
//             }

//             if(isLeaf(node)) leaves.push_back(node);
//         };
//         traversal(traversal, root);

//         string ans = "";
//         for(TreeNode* curr : leaves) {
//             string s = "";
//             while(curr->val != -1) {
//                 s += string(1, curr->val + 'a');
//                 curr = parent[curr];
//             }
//             if(ans.length() == 0) {
//                 ans = s;
//             } else {
//                 ans = min(ans, s);
//             }
//         }
//         return ans;
//     }
// };
