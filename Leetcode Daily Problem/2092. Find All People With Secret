// universal adj list and applying bfs one time only

class Solution {
public:
    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
        int s = meetings.size();
        unordered_map<int, vector<pair<int,int>>> adj;

        for(auto m : meetings) {
            adj[m[0]].push_back({m[1], m[2]});
            adj[m[1]].push_back({m[0], m[2]});
        }

        queue<pair<int,int>> q;
        vector<int> lastTimeToKnowSecret(n,INT_MAX);

        lastTimeToKnowSecret[0] = 0;
        lastTimeToKnowSecret[firstPerson] = 0;

        q.push({0,0});
        q.push({firstPerson, 0});

        while(!q.empty()) {
            int person = q.front().first;
            int time = q.front().second;
            q.pop();

            for(auto neighbourTimePair : adj[person]) {
                int neighbour = neighbourTimePair.first;
                int meetingTimeWithPerson = neighbourTimePair.second;

                if(meetingTimeWithPerson >= time && meetingTimeWithPerson < lastTimeToKnowSecret[neighbour]) {
                    q.push({neighbour, meetingTimeWithPerson});
                    lastTimeToKnowSecret[neighbour] = meetingTimeWithPerson;
                }
            }
        }

        vector<int> ans;
        for(int i = 0 ; i < n ; i++) {
            if(lastTimeToKnowSecret[i] != INT_MAX) ans.push_back(i);
        }
        return ans;
    }
};










// Different adj list for each time and then applying bfs for every time

// class Solution {
// public:
//     vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
//         int s = meetings.size();
//         // <time , <person, having meeting with> >
//         map<int, unordered_map<int, vector<int>>> mpp;
//         vector<bool> knows(n, false);

//         knows[0] = true;
//         knows[firstPerson] = true;

//         for(int i = 0 ; i < s ; i++) {
//             mpp[meetings[i][2]][meetings[i][0]].push_back(meetings[i][1]);
//             mpp[meetings[i][2]][meetings[i][1]].push_back(meetings[i][0]);
//         }

//         for(auto item : mpp) {
//             unordered_map<int, vector<int>> adj = item.second;
//             queue<int> q;
//             unordered_set<int> visited;

//             for(auto item2 : adj) {
//                 int person = item2.first;
//                 if(knows[person] == true) {
//                     q.push(person);
//                     visited.insert(person);
//                 }
//             }

//             while(!q.empty()) {
//                 int person = q.front();
//                 q.pop();

//                 for(auto adjacent : adj[person]) {
//                     if(knows[adjacent] == false && visited.find(adjacent) == visited.end()) {
//                         knows[adjacent] = true;
//                         q.push(adjacent);
//                         visited.insert(adjacent);
//                     }
//                 }
//             }
//         }

//         vector<int> ans;
//         for(int i = 0 ; i < n ; i++) {
//             if(knows[i] == true) ans.push_back(i);
//         }
//         return ans;
//     }
// };



        // for(auto item : mpp) {
        //     cout << "\nTime: " << item.first << " : ";
        //     for(auto item2 : item.second) {
        //         cout << "\nPerson " << item2.first << " : ";
        //         for(auto item3 : item2.second) cout << item3 << ",";
        //     }
        // }
