/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    void dfs(TreeNode* root, int depth, int &maxDepth, int &value) {
        if(!root) return;

        if(depth > maxDepth) {
            maxDepth = depth;
            value = root->val;
        }

        dfs(root->left, depth+1, maxDepth, value);
        dfs(root->right, depth+1, maxDepth, value);
    }
    int findBottomLeftValue(TreeNode* root) {
        int value;
        int maxDepth = -1;
        dfs(root, 0, maxDepth, value);
        return value;
    }
};




// class Solution {
// public:
//     int height(TreeNode* root) {
//         if(!root) return 0;
//         return 1 + max(height(root->left), height(root->right));
//     }
//     int findBottomLeftValue(TreeNode* root) {
//         if(root && !root->left && !root->right) return root->val;
//         if(height(root->left) >= height(root->right)) {
//             return findBottomLeftValue(root->left);
//         } else {
//             return findBottomLeftValue(root->right);
//         }
//         return -1;
//     }
// };
