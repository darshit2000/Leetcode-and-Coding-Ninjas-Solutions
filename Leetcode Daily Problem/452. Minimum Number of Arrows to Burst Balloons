https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/description/?envType=daily-question&envId=2024-03-18


// total non overlapping COMMON intervals

class Solution {
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        int n = points.size();
        sort(points.begin(), points.end());

        int j = 1;
        int tot = 1;
        int end = points[0][1];
        
        while(j < n) {
            if(points[j][0] <= end) {
                end = min(end, points[j][1]);
            } else {
                tot++;
                end = points[j][1];
            }
            j++;
        }
        return tot;
    }
};






// sort by second element

// class Solution {
// public:
//     int findMinArrowShots(vector<vector<int>>& points) {
//         int n = points.size();
//         sort(points.begin(), points.end(), [](vector<int> &a, vector<int> &b) { return  a[1] < b[1]; });

//         // for(auto v : points) cout << v[0] << "," << v[1] <<endl;

//         int i = 0; 
//         int j = 0;
//         int tot = 1;
        
//         while(j < n) {
//             if((points[j][0] <= points[i][1] && points[j][0] >= points[i][0]) || (points[j][0] <= points[i][0] && points[j][1] >= points[i][1])) {
//                 j++;
//                 continue;
//             }
//             tot++;
//             i = j;
//         }
//         return tot;
//     }
// };
