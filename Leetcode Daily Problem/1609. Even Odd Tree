/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        if(!root) return true;
        if(root->val % 2 == 0) return false;
        queue<TreeNode*> q;
        q.push(root);
        int level = 0;

        while(!q.empty()) {
            int size = q.size();
            int curr = INT_MIN;
\
            for(int i = 0 ; i < size ; i++) {
                TreeNode* node = q.front();
                q.pop();

                if(level % 2 == 0) {
                    if(node->val % 2 == 0) return false;

                    if(i == 0) {
                        curr = node->val;
                    } else {
                        if(node->val > curr) {
                            curr = node->val;
                        } else if(node->val <= curr) return false;
                    }
                } else {
                    if(node->val % 2 == 1) return false;

                    if(i == 0) {
                        curr = node->val;
                    } else {
                        if(node->val < curr) {
                            curr = node->val;
                        } else if(node->val >= curr) return false;
                    }
                }

                // if(i == 0) {
                //     if(level % 2 == 0) {
                //         if(node->val % 2 == 0) return false;
                //     } else {
                //         if(node->val % 2 == 1) return false;
                //     }
                //     curr = node->val;
                // }
                // else if(i > 0) {
                //     if(level % 2 == 0) {
                //         if(node->val % 2 == 0) return false;
                //         else {
                //             if(node->val > curr) {
                //                 curr = node->val;
                //             } else if(node->val <= curr) return false;
                //         } 
                //     } else {
                //         if(node->val % 2 == 1) return false;
                //         else {
                //             if(node->val < curr) {
                //                 curr = node->val;
                //             } else if(node->val >= curr) return false;
                //         } 
                //     }
                // }

                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            level++;
        }
        return true;
    }
};
