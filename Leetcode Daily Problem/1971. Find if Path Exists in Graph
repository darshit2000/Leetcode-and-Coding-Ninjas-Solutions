https://leetcode.com/problems/find-if-path-exists-in-graph/description/?envType=daily-question&envId=2024-04-21



// Union find

class DS {
public:
    vector<int> parent, size;
    DS(int n) {
        size.resize(n, 1);
        parent.resize(n);
        for(int i = 0 ; i < n ; i++) parent[i] = i;
    }

    int find(int u) {
        if(u == parent[u]) return u;
        return parent[u] = find(parent[u]);
    }

    void merge(int u, int v) {
        int pu = find(u);
        int pv = find(v);

        if(pu == pv) return;

        if(size[pu] < size[pv]) {
            parent[pu] = pv;
            size[pv] += size[pu];
        } else {
            parent[pv] = pu;
            size[pu] += size[pv];
        }
    }
};

class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        vector<vector<int>> adj(n);
        DS ds(n);

        for(auto& e : edges) {
            ds.merge(e[0], e[1]);
        }
        return ds.find(source) == ds.find(destination);
    }
};



// dfs

// class Solution {
// public:
//     bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
//         vector<vector<int>> adj(n);
//         vector<int> vis(n, 0);

//         for(auto& e : edges) {
//             adj[e[0]].push_back(e[1]);
//             adj[e[1]].push_back(e[0]);
//         }

//         auto dfs = [&] (auto& dfs, int node) -> void {
//             vis[node] = 1;

//             for(auto& child : adj[node]) {
//                 if(!vis[child]) dfs(dfs, child);
//             }
//         };

//         dfs(dfs, source);
//         if(vis[destination]) return true;
//         return false;
//     }
// };



// bfs

// class Solution {
// public:
//     bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
//         vector<vector<int>> adj(n);
//         vector<int> vis(n, 0);
//         queue<int> q;

//         for(auto& e : edges) {
//             adj[e[0]].push_back(e[1]);
//             adj[e[1]].push_back(e[0]);
//         }

//         q.push(source);
//         vis[source] = 1;

//         while(!q.empty()) {
//             int node = q.front();
//             q.pop();

//             for(auto& child : adj[node]) {
//                 if(!vis[child]) {
//                     vis[child] = 1;
//                     q.push(child);
//                 }
//             }
//         }
//         if(vis[destination]) return true;
//         return false;
//     }
// };
