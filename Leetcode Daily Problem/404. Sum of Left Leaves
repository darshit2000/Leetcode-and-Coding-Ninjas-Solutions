https://leetcode.com/problems/sum-of-left-leaves/description/?envType=daily-question&envId=2024-04-14



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    bool isLeaf(TreeNode* node) {
        if(node && !node->left && !node->right) return true;
        return false;
    } 
    int sumOfLeftLeaves(TreeNode* root) {
        if(!root) return 0;
        int s = 0;

        auto inorder = [&] (auto& inorder, TreeNode* node, bool isLeft) -> void {
            if(!node) return;
            if(isLeft && isLeaf(node)) s += node->val;

            inorder(inorder, node->left, true);
            inorder(inorder, node->right, false);
        }; 

        inorder(inorder, root, false);
        return s;
    }
};





// class Solution {
// public:
//     bool isLeaf(TreeNode* node) {
//         if(node && !node->left && !node->right) return true;
//         return false;
//     }
//     int sumOfLeftLeaves(TreeNode* root) {
//         if(!root) return 0;
//         int s = 0;

//         if(root->left && isLeaf(root->left)) s += root->left->val;

//         s += sumOfLeftLeaves(root->left);
//         s += sumOfLeftLeaves(root->right);

//         return s;
//     }
// };
