https://leetcode.com/problems/patching-array/description/


#  we can reach any sum 'n' if the 'prefixSum' of existing numbers is more than 'n'

class Solution:
    def minPatches(self, nums: List[int], n: int) -> int:
        m = len(nums)
        patch = 0
        max_reachable = 0
        i = 0

        while max_reachable < n:
            if i < m and nums[i] <= max_reachable + 1:
                max_reachable += nums[i]
                i += 1
            else:
                patch += 1
                max_reachable += (max_reachable + 1)
        return patch



# TLE

# class Solution:
#     def minPatches(self, nums: List[int], n: int) -> int:
#         m = len(nums)
#         patch = 0
#         sum_bit = 1

#         for num in nums:
#             sum_bit |= (sum_bit << num)       

#         for i in range(1,n+1):
#             if (sum_bit & (1<<i)) == 0:
#                 patch += 1
#                 sum_bit |= (sum_bit << i)

#             if (sum_bit & (1<<n)) != 0:
#                 break
#         return patch
