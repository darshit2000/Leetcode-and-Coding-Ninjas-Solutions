/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

Node* mergeList(Node* first, Node* second) {
	if(first == NULL && second != NULL) return second;
	else if(first != NULL && second == NULL) return first;
	Node* t1 = first;
	Node* t2 = second;
	Node* newHead = new Node(-1);
	Node* temp = newHead;
	while(t1 && t2) {
		if(t1->data <= t2->data) {
			temp->child = t1;
			temp = temp->child;
			t1 = t1->child;
		} else {
			temp->child = t2;
			temp = temp->child;
			t2 = t2->child;
		}
	}
	while(t1) {
		temp->child = t1;
		temp = temp->child;
		t1 = t1->child;
	}
	while(t2) {
		temp->child = t2;
		temp = temp->child;
		t2 = t2->child;
	}
	temp->child = NULL;
	return newHead->child;
}

Node* flattenLinkedList(Node* head) 
{
	// Write your code here
	if(!head || !head->next) return head;
	Node* first = head;
	Node* second = flattenLinkedList(head->next);
	first->next = NULL;
	Node* mergedListHead = mergeList(first, second);
	return mergedListHead;
}
