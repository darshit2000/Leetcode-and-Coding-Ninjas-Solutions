/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node *rotate(Node *head, int k) {
     // Write your code here.
     if(!head || !head->next) return head;
     Node* slow = head;
     Node* fast = head;

     Node* t = head;
     int n = 0;
     while(t) {
          n++;
          t = t->next;
     }
     k = k%n;
     if(k == 0) return head;
     for(int i = 0 ; i < k ; i++) fast = fast->next;
     while(fast->next != NULL) {
          slow = slow->next;
          fast = fast->next;
     }
     fast->next = head;
     head = slow->next;
     slow->next = NULL;
     return head;
}
