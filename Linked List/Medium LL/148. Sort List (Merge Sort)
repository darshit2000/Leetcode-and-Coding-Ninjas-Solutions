/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* mergeList(ListNode* first, ListNode* second) {
        ListNode* newHead = new ListNode(-1);
        ListNode* curr = newHead;
        while(first && second) {
            if(first->val <= second->val) {
                curr->next = first;
                curr = curr->next;
                first = first->next;
            } else {
                curr->next = second;
                curr = curr->next;
                second = second->next;
            }
        }
        if(first != NULL) {
            curr->next = first;
        } else if(second != NULL) {
            curr->next = second;
        }
        return newHead->next;
    }

    ListNode* sortList(ListNode* head) {
        if(!head || !head->next) return head;
        
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode* first = head;
        ListNode* second = slow->next;
        slow->next = NULL;
        ListNode* firstSortedHead = sortList(first);
        ListNode* secondSortedHead = sortList(second);
        ListNode* final = mergeList(firstSortedHead, secondSortedHead);
        return final;
    }
};
