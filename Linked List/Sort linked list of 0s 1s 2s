/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/


Node* sortList(Node *head){
    // Write your code here.
    if(head == NULL || head->next == NULL) return head;
    Node* curr = head;

    Node* newHeadZero = new Node();
    Node* newHeadOne = new Node();
    Node* newHeadTwo = new Node();

    Node* currZero = newHeadZero;
    Node* currOne = newHeadOne;
    Node* currTwo = newHeadTwo;
    
    while(curr != NULL) {
        if(curr->data == 0) {
            currZero->next = curr;
            currZero = currZero->next;
        }
        else if(curr->data == 1) {
            currOne->next = curr;
            currOne = currOne->next;
        }
        else if(curr->data == 2) {
            currTwo->next = curr;
            currTwo = currTwo->next;
        }
        curr = curr->next;
    }
    newHeadZero = newHeadZero->next;
    newHeadOne = newHeadOne->next;
    newHeadTwo = newHeadTwo->next;

    if(newHeadZero != NULL) {
        currZero->next = ((newHeadOne != NULL) ? newHeadOne : newHeadTwo);
        currOne->next = newHeadTwo;
        currTwo->next = NULL;
        return newHeadZero;
    } else {
        if(newHeadOne != NULL) {
            currOne->next = ((newHeadTwo != NULL) ? newHeadTwo : NULL);
            return newHeadOne;
        } else return newHeadTwo;
    }

}

// Node* sortList(Node *head){
//     // Write your code here.
//     if(head == NULL || head->next == NULL) return head;
//     Node* curr = head;
//     int zero = 0;
//     int one = 0;
//     int two = 0;
//     while(curr != NULL) {
//         if(curr->data == 0) zero++;
//         else if(curr->data == 1) one++;
//         else if(curr->data == 2) two++;
//         curr = curr->next;
//     }
//     Node* newHead = new Node();
//     Node* currNode = newHead;
//     while(zero > 0) {
//         Node* newNode = new Node(0);
//         currNode->next = newNode;
//         currNode = newNode;
//         zero--;
//     }
//     while(one > 0) {
//         Node* newNode = new Node(1);
//         currNode->next = newNode;
//         currNode = newNode;
//         one--;
//     }
//     while(two > 0) {
//         Node* newNode = new Node(2);
//         currNode->next = newNode;
//         currNode = newNode;
//         two--;
//     }
//     newHead = newHead->next;
//     return newHead;

// }
