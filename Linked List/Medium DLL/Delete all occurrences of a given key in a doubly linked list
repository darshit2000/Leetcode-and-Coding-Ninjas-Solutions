/**
 * Definition of doubly linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *prev;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next, Node *prev) {
 *          this->data = data;
 *          this->prev = prev;
 *          this->next = next;
 *      }
 * };
 *
 *************************************************************************/

Node * deleteAllOccurrences(Node* head, int k) {
    // Write your code here
    if(!head) return NULL;
    if(!head->next && head->data == k) return NULL;
    else if(!head->next && head->data != k) return head;

    Node* curr = head->next;
    while(curr) {
        if(curr->data == k) {
            Node* temp = curr;
            curr->prev->next = curr->next;
            if(curr->next) curr->next->prev = curr->prev;
            curr = curr->next;
            delete(temp);
        } else curr = curr->next;
    }
    if(head->data == k) {
        Node* temp = head;
        head = temp->next;
        if(head) head->prev = NULL;
        delete(temp);
    }
    return head;
}
