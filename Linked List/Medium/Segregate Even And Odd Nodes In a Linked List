/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 *		Node() : data(0), next(nullptr) {};
 *		Node(int x) : data(x), next(nullptr) {}
 *		Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node* segregateEvenOdd(Node* head)
{
    // Write your code here
    if(head == NULL || head->next == NULL) return head;
    Node* evenHeader = new Node(-1);
    Node* oddHeader = new Node(-1);
    Node* currEven = evenHeader;
    Node* currOdd = oddHeader;
    Node* curr = head;

    while(curr != NULL) {
        if(curr->data % 2 == 0) {
            currEven->next = curr;
            currEven = currEven->next;
        } else {
            currOdd->next = curr;
            currOdd = currOdd->next;
        }
        curr = curr->next;
    }
    evenHeader = evenHeader->next;
    oddHeader = oddHeader->next;

    if(evenHeader != NULL) {
        currEven->next = ((oddHeader != NULL) ? oddHeader : NULL);
        if(oddHeader != NULL) currOdd->next = NULL;
        return evenHeader;
    } else return oddHeader;
}
