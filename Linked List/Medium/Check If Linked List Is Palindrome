/****************************************************************

    Following is the class structure of the Node class:

    class Node
    {
    public:
        int data;
        Node *next;
        Node()
        {
            this->data = 0;
            next = NULL;
        }
        Node(int data)
        {
            this->data = data;
            this->next = NULL;
        }
        Node(int data, Node* next)
        {
            this->data = data;
            this->next = next;
        }
    };

*****************************************************************/

Node* reverse(Node* head) {
    if(head == NULL || head->next == NULL) return head;
    Node* prevNode = NULL;
    Node* currNode = head;
    Node* nextNode = currNode->next;
    while(currNode->next != NULL) {
        currNode->next = prevNode;
        prevNode = currNode;
        currNode = nextNode;
        nextNode = currNode->next;
    }
    currNode->next = prevNode;
    return currNode;
}


// TC: O(2n)   SC: O(1) 

bool isPalindrome(Node *head)
{
    // write your code here
    if(!head || !head->next) return true;
    if(!head->next->next) return (head->data == head->next->data);

    Node* newHead = NULL;
    Node* slow = head;
    Node* fast = head;
    while(fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }
    if(fast == NULL) {
        newHead = reverse(slow);
    } else {
        newHead = reverse(slow->next);
    }
    
    Node* node1 = head;
    Node* node2 = newHead;
    while(node1&& node2) {
        if(node1->data != node2->data) return false;
        node1 = node1->next;
        node2 = node2->next;
    }
    return true;
}



// TC: O(2n)   SC: O(n) 

// bool isPalindrome(Node *head)
// {
//     // write your code here
//     if(!head || !head->next) return true;
//     if(!head->next->next) return (head->data == head->next->data);

//     Node* newHead = new Node(head->data);
//     Node* temp1 = head->next;

//     while(temp1 != NULL) {
//         Node* newNode = new Node(temp1->data);
//         newNode->next = newHead;
//         newHead = newNode;
//         temp1 = temp1->next;
//     }

//     Node* node1 = head;
//     Node* node2 = newHead;

//     while(node1 && node2) {
//         if(node1->data != node2->data) return false;
//         node1 = node1->next;
//         node2 = node2->next;
//     }
//     return true;
// }
