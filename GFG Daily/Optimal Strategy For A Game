https://www.geeksforgeeks.org/problems/optimal-strategy-for-a-game-1587115620/1



class Solution{
    public:
    long long maximumAmount(int n, int arr[]){
        // Your code here
        vector<vector<long long>> dp(n, vector<long long>(n, -1));
        
        auto solve = [&] (auto& solve, int start, int end) -> long long {
            if(start > end) return 0;
            
            if(dp[start][end] != -1) return dp[start][end];
            
            // min() because Bob will make sure that I get the worst, so minimum
            // https://www.youtube.com/watch?v=ww4V7vRIzSk
            // we are doing max() below in return statement
            long long left = (long long)arr[start] + min(solve(solve, start + 2, end), solve(solve, start + 1, end - 1));
            long long right = (long long)arr[end] + min(solve(solve, start + 1, end - 1), solve(solve, start, end - 2));
            
            return dp[start][end] = max(left, right);
        };
        
        return solve(solve, 0, n-1);
    }
};
