
// LIS (nlogn)

class Solution {
public:
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        int n = envelopes.size();
        sort(envelopes.begin(), envelopes.end(), [] (vector<int> &a, vector<int> &b) 
        { 
            if(a[0] == b[0]){
                return a[1] > b[1];
            }
            return a[0] < b[0]; 
        });

        vector<int> temp;
        temp.push_back(envelopes[0][1]);

        for(int i = 1 ; i < n ; i++) {
            if(envelopes[i][1] > temp.back()) {
                temp.push_back(envelopes[i][1]);
            } 
            else {
                int index = lower_bound(temp.begin(), temp.end(), envelopes[i][1]) - temp.begin();
                temp[index] = envelopes[i][1];
            }
        }
        return temp.size();
    }
};








// LIS (n^2)

// class Solution {
// public:
//     int maxEnvelopes(vector<vector<int>>& envelopes) {
//         int n = envelopes.size();
//         sort(envelopes.begin(), envelopes.end());
//         int mx = 1;

//         vector<int> dp(n, 1);

//         for(int i = 1 ; i < n ; i++) {
//             for(int j = 0 ; j < i ; j++) {
//                 if(envelopes[i][0] > envelopes[j][0] && envelopes[i][1] > envelopes[j][1]) {
//                     dp[i] = max(dp[i], 1 + dp[j]);
//                 }
//             }
//             mx = max(mx, dp[i]);
//         }
//         return mx;
//     }
// };









// Wrong solution

// class Solution {
// public:

//     int findInd(vector<vector<int>>& envelopes, int i) {
//         int n = envelopes.size();
//         int low = i+1;
//         int high = n-1;
//         int ans = n;

//         while(low <= high) {
//             int mid = (low + high)/2;

//             if(envelopes[mid][0] > envelopes[i][0] && envelopes[mid][1] > envelopes[i][1]) {
//                 ans = mid;
//                 high = mid - 1;
//             } else {
//                 low = mid + 1;
//             }
//         }
//         return ans;
//     }

//     int maxEnvelopes(vector<vector<int>>& envelopes) {
//         int n = envelopes.size();
//         sort(envelopes.begin(), envelopes.end());

//         vector<int> dp(n+1, 1);
//         dp[n] = 0;

//         for(int i = n-2 ; i >= 0 ; i--) {
//             int exclude = dp[i+1];

//             int index = findInd(envelopes, i);
//             int include = 1 + dp[index];

//             dp[i] = max(include, exclude);
//         }
//         for(int i : dp) cout << i << ",";
//         return dp[0];
//     }
// };
