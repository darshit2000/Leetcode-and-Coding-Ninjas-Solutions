// DP

class Solution {
public:

    int findInd(vector<vector<int>>& pairs, int i) {
        int n = pairs.size();
        int end = pairs[i][1];
        int low = i + 1;
        int high = n - 1;
        int ans = n;

        while(low <= high) {
            int mid = (low + high)/2;

            if(pairs[mid][0] > end) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    int findLongestChain(vector<vector<int>>& pairs) {
        int n = pairs.size();
        int count = 1;
        int mx = 0;
        vector<int> dp(n+1, 0);
        dp[n-1] = 1;

        sort(pairs.begin(), pairs.end());

        for(int i = n-2 ; i >= 0 ; i--) {
            int exclude = dp[i+1];
            int index = findInd(pairs, i);
            int include = 1 + dp[index];
            mx = max(include, exclude);
            dp[i] = mx;
        }

        return dp[0];
    }
};











// Greedy

// class Solution {
// public:
//     int findLongestChain(vector<vector<int>>& pairs) {
//         int n = pairs.size();

//         auto compareFunc = [] (vector<int> &a, vector<int> &b) {
//             return a[1] < b[1];
//         };

//         sort(pairs.begin(), pairs.end(), compareFunc);

//         int count = 1;
//         int mx = 0;

//         for(int i = 0 ; i < n ; i++) {
//             int end = pairs[i][1];
//             count = 1;
//             for(int j = i+1 ; j < n ; j++) {
//                 if(pairs[j][0] > end) {
//                     end = pairs[j][1];
//                     count++;
//                 } 
//             }
//             mx = max(mx, count);
//         }

//         return mx;
//     }
// };







// Recursion

// class Solution {
// public:
//     void helper(vector<vector<int>>& pairs, int count, int &mx, int index, int end) {
//         if(index >= pairs.size()) return;

//         for(int j = index+1 ; j < pairs.size() ; j++) {
//             if(pairs[j][0] > end) {
//                 helper(pairs, count, mx, j+1, end);

//                 count++;
//                 mx = max(mx, count);
//                 end = pairs[j][1];
//                 helper(pairs, count, mx, j+1, end);
//             }
//         }
//     }

//     int findLongestChain(vector<vector<int>>& pairs) {
//         int n = pairs.size();

//         auto compareFunc = [] (vector<int> &a, vector<int> &b) {
//             if(a[1] == b[1]) {
//                 return a[0] < b[0];
//             } else {
//                 return a[1] < b[1];
//             }
//         };

//         sort(pairs.begin(), pairs.end(), compareFunc);

//         int count = 1;
//         int mx = 0;

//         for(int i = 0 ; i < n ; i++) {
//             int end = pairs[i][1];
//             count = 1;
//             mx = max(count, mx);
//             helper(pairs, count, mx, i, end);
//         }

//         return mx;
//     }
// };
