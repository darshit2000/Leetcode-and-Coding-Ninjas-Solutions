https://leetcode.com/problems/flower-planting-with-no-adjacent/



// Method 1 (Using bit manipulation)

class Solution {
public:
    vector<int> gardenNoAdj(int n, vector<vector<int>>& paths) {
        vector<vector<int>> adj(n+1);
        vector<int> vis(n+1, 0);
        vector<int> color(n+1, -1);
        int colorBit = 0b0000;

        for(auto& p : paths) {
            adj[p[0]].push_back(p[1]);
            adj[p[1]].push_back(p[0]);
        }

        auto dfs = [&] (auto &dfs, int node) -> void {
            vis[node] = 1;

            for(auto& child : adj[node]) {
                if(!vis[child]) {
                    dfs(dfs, child);
                }
            }

            for(auto& child : adj[node]) {
                int c = color[child];
                if(c != -1) {
                    colorBit = colorBit | (1 << (c - 1));
                }
            }

            for(int i = 1; i <= 4 ; i++) {
                if((colorBit & (1<<(i-1))) == 0) {
                    color[node] = i;
                }
            }

            colorBit = 0b0000;
        };

        for(int i = 1 ; i <= n ; i++) {
            if(!vis[i]) {
                dfs(dfs, i);
            }
        }

        color.erase(color.begin());
        return color;
    }
};






// Method 2 (using set)

// class Solution {
// public:
//     vector<int> gardenNoAdj(int n, vector<vector<int>>& paths) {
//         vector<vector<int>> adj(n+1);
//         vector<int> vis(n+1, 0);
//         vector<int> color(n+1, -1);
//         unordered_set<int> st;

//         for(auto& p : paths) {
//             adj[p[0]].push_back(p[1]);
//             adj[p[1]].push_back(p[0]);
//         }

//         auto dfs = [&] (auto &dfs, int node) -> void {
//             vis[node] = 1;

//             for(auto& child : adj[node]) {
//                 if(!vis[child]) {
//                     dfs(dfs, child);
//                 }
//             }

//             for(auto& child : adj[node]) {
//                 if(color[child] != -1) {
//                     st.insert(color[child]);
//                 }
//             }

//             for(int i = 1; i <= 4 ; i++) {
//                 if(st.find(i) == st.end()) {
//                     color[node] = i;
//                     break;
//                 }
//             }
//             st.clear();
//         };

//         for(int i = 0 ; i <= n ; i++) {
//             if(!vis[i]) {
//                 dfs(dfs, i);
//             }
//         }

//         color.erase(color.begin());
//         return color;
//     }
// };
