// class Solution {
// public:    
//     void helper(int curr, int n, int k, vector<vector<int>> &ans, vector<int> &ds) {
//         if(curr > n) {
//             if(ds.size() == k) {
//                 ans.push_back(ds);
//                 return;
//             } else return;
//         }

//         ds.push_back(curr);
//         helper(curr+1, n, k, ans, ds);
//         ds.pop_back();
//         helper(curr+1, n, k, ans, ds);
//     }

//     vector<vector<int>> combine(int n, int k) {
//         vector<vector<int>> ans;
//         vector<int> ds;
//         helper(1, n, k, ans, ds);
//         return ans;
//     }
// };




class Solution {
public:
    void helper(int curr, int n, int k, vector<vector<int>> &ans, vector<int> &ds) {
        if(ds.size() == k) {
            ans.push_back(ds);
            return;
        }

        for(int i = curr ; i <= n ; i++) {
            ds.push_back(i);
            helper(i+1, n, k, ans, ds);
            ds.pop_back();
        }
    }
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> ans;
        vector<int> ds;
        helper(1, n, k, ans, ds);
        return ans;
    }
};
