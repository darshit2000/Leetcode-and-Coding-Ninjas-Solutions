// Sort the string and then take alternate

class Solution {
public:
    string reorganizeString(string s) {
        int n = s.length();
        vector<int> v(26);
        int maxFreq = 0;
        string ans;
        sort(s.begin(), s.end());

        for(char c : s) {
            v[c - 'a']++;
            maxFreq = max(maxFreq, v[c - 'a']);
        }

        // Even length string
        if(n % 2 == 0) {
            int i = 0;
            int j = n/2;
            if(maxFreq > n/2) return "";

            while(i < n/2 && j < n) {
                ans += s[i];
                ans += s[j];
                i++;
                j++;
            }
        } 
        // Odd length String
        else {
            int i = 0;
            int j = n/2 + 1;
            int mid = n/2;

            ans += s[mid];

            while(i < n/2 && j < n) {
                if(ans.back() != s[j]) {
                    ans += s[j];
                    ans += s[i];
                } else if(ans.back() != s[i]) {
                    ans += s[i];
                    ans += s[j];
                } else return "";
                i++;
                j++;
            }
        }

        return ans;
    }
};






// Priority Queue

// class Solution {
// public:
//     string reorganizeString(string s) {
//         int n = s.length();
//         vector<int> v(26);
//         priority_queue<pair<int,char>> maxHeap;
//         string ans;

//         for(char c : s) v[c - 'a']++;

//         for(int i = 0 ; i < 26 ; i++) {
//             if(v[i] > 0) {
//                 maxHeap.push({v[i], i + 'a'});
//             }
//         }
        
//         while(!maxHeap.empty()) {
//             int freq = maxHeap.top().first;
//             char ch = maxHeap.top().second;
//             maxHeap.pop();

//             if(ans.empty() || ch != ans.back()) {
//                 ans += ch;
//                 if(freq-1 > 0) {
//                     maxHeap.push({freq-1, ch});
//                 }
//             } else {
//                 if(maxHeap.empty()) return "";

//                 int secondCh = maxHeap.top().second;
//                 int secondFreq = maxHeap.top().first;
//                 maxHeap.pop();

//                 ans += secondCh;

//                 maxHeap.push({freq, ch});
//                 if(secondFreq - 1 > 0) {
//                     maxHeap.push({secondFreq-1, secondCh});
//                 }
//             }
//         }

//         return ans;
//     }
// };

