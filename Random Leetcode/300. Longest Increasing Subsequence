// O(n^2)

// class Solution {
// public:

//     int lengthOfLIS(vector<int>& nums) {
//         int n = nums.size();

//         vector<int> dp(n, 1);
//         int mx = 1;

//         for(int i = 1 ; i < n ; i++) {
//             for(int j = 0 ; j < i ; j++) {
//                 if(nums[i] > nums[j]) {
//                     dp[i] = max(dp[i], 1 + dp[j]);
//                 }
//             }
//             mx = max(mx, dp[i]);
//         }

//         return mx;
//     }
// };




// O(nlogn)

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();

        vector<int> temp;
        temp.push_back(nums[0]);

        for(int i = 1 ; i < n ; i++) {
            if(nums[i] > temp.back()) {
                temp.push_back(nums[i]);
            } else {
                int index = lower_bound(temp.begin(), temp.end(), nums[i]) - temp.begin();
                temp[index] = nums[i];
            }
        }
         return temp.size();
    }
};
