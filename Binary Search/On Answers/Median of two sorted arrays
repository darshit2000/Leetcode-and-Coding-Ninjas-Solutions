// TC: O(min(logm, logn))    SC: O(1)

double median(vector<int>& a, vector<int>& b) {
	// Write your code here.
	int n1 = a.size();
	int n2 = b.size();
	if(n1 > n2) return median(b, a);
	int n = n1 + n2;
	int elementsOnLeft = (n1+n2+1)/2;

	int low = 0;
	int high = n1;

	while(low <= high) {
		int mid1 = (low+high) >> 1;
		int mid2 = elementsOnLeft - mid1;

		int l1 = INT_MIN;
		int l2 = INT_MIN;
		int r1 = INT_MAX;
		int r2 = INT_MAX;
		
		if(mid1 < n1) r1 = a[mid1];
		if(mid2 < n2) r2 = b[mid2];
		if(mid1-1 >= 0) l1 = a[mid1-1];
		if(mid2-1 >= 0) l2 = b[mid2-1];

		if(l1 <= r2 && l2 <= r1) {
			int first = max(l1,l2);
			int second = min(r1,r2);
			if(n % 2 == 0) return (((double)first+(double)second)/2.0);
			else return max(l1,l2);
		} else if(l1 > r2 && l2 <= r1) {
			high = mid1 - 1;
		} else if(l1 <= r2 && l2 > r1) {
			low = mid1 + 1;
		}
	}
	return -1;	
}



// TC: O(n+m)   SC: O(1)

// double median(vector<int>& a, vector<int>& b) {
// 	// Write your code here.
// 	int n1 = a.size();
// 	int n2 = b.size();
// 	int n = n1 + n2;

// 	int currIndex = 0;
// 	int index2 = n/2;
// 	int index1 = index2 - 1;
// 	int first = -1;
// 	int second = -1;

// 	int i = 0;
// 	int j = 0;
// 	while(i < n1 && j < n2) {
// 		if(a[i] <= b[j]) {
// 			if(currIndex == index1) first = a[i];
// 			else if(currIndex == index2) second = a[i];
// 			currIndex++;
// 			i++;
// 		} else if(b[j] < a[i]) {
// 			if(currIndex == index1) first = b[j];
// 			else if(currIndex == index2) second = b[j];
// 			currIndex++;
// 			j++;
// 		}
// 	} 
// 	while(i < n1) {
// 		if(currIndex == index1) first = a[i];
// 		else if(currIndex == index2) second = a[i];
// 		currIndex++;
// 		i++;
// 	}
// 	while(j < n2) {
// 		if(currIndex == index1) first = b[j];
// 		else if(currIndex == index2) second = b[j];
// 		currIndex++;
// 		j++;
// 	}
	
// 	if(n % 2 == 1) return second;
// 	return ((double)first + (double)second)/2.0;
// }
