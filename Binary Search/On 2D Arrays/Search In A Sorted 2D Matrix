// O(log(n*m))

bool searchElement(vector<vector<int>> &MATRIX, int target) {
    // Write your code here.
    int n = MATRIX.size();
    int m = MATRIX[0].size();

    int row = 0;
    int col = m-1;
    while(row < n && col < m) {
        if(MATRIX[row][col] == target) return true;
        if(MATRIX[row][col] < target) {
            row++;
        } else if(MATRIX[row][col] > target) {
            col--;
        }
    }

    return false;
}




// O(logm + logn)

// bool searchElement(vector<vector<int>> &MATRIX, int target) {
//     // Write your code here.
//     int targetRow = -1;

//     int n = MATRIX.size();
//     int m = MATRIX[0].size();

//     int low1 = 0;
//     int high1 = n-1;
//     while(low1 <= high1) {
//         int mid1 = (low1 + high1) >> 1;
//         if(MATRIX[mid1][0] <= target) {
//             targetRow = mid1;
//             low1 = mid1 + 1;
//         } else if(MATRIX[mid1][0] > target){
//             high1 = mid1 - 1;
//         }
//     }

//     int low2 = 0;
//     int high2 = m - 1;
//     while(low2 <= high2) {
//         int mid2 = (low2 + high2) >> 1;
//         if(MATRIX[targetRow][mid2] == target) return true;
//         else if(MATRIX[targetRow][mid2] < target) low2 = mid2 + 1;
//         else if(MATRIX[targetRow][mid2] > target) high2 = mid2 - 1;
//     }
//     return false;
// }
