int rowWithMax1s(vector<vector<int>> &matrix, int n, int m)
{
    //    Write your code here.
    int currMax = 0;
    int row = -1;

    for(int i = 0 ; i < n ; i++) {
        int firstOccurenceOfOne = lower_bound(matrix[i].begin(), matrix[i].end(),1) - matrix[i].begin();
        int totalOnes = matrix[i].size() - firstOccurenceOfOne;
        if(totalOnes > currMax) {
            currMax = totalOnes;
            row = i;
        }
    }
    return row;
}





// int solve(vector<int> arr, int m) {
//     if(arr[0] == 1) return m;
//     int low = 1;
//     int high = m-1;
//     while(low <= high) {
//         int mid = (low + high) >> 1;
        
//         if(arr[mid] == 1 && arr[mid-1] == 0) return (m-mid);
//         else if(arr[mid] == 1 && arr[mid-1] == 1) high = mid - 1;
//         else if(arr[mid] == 0) low = mid + 1;
//     }
//     return -1;
// }

// int rowWithMax1s(vector<vector<int>> &matrix, int n, int m)
// {
//     //    Write your code here.
//     int currMax = 0;
//     int row = -1;

//     for(int i = 0 ; i < n ; i++) {
//         int totalOnes = solve(matrix[i], matrix[i].size());
//         if(totalOnes > currMax) {
//             currMax = totalOnes;
//             row = i;
//         }
//     }
//     return row;
// }
