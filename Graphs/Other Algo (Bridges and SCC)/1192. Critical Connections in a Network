https://leetcode.com/problems/critical-connections-in-a-network/description/



class Solution {
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<vector<int>> adj(n);
        vector<int> tin(n, 0), low(n, 0), vis(n,0);
        vector<vector<int>> ans;
        int timer = 1;

        for(auto& c : connections) {
            int u = c[0];
            int v = c[1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        auto dfs = [&] (auto &dfs, int node, int parent) -> void {
            vis[node] = 1;
            low[node] = timer;
            tin[node] = timer;
            timer++;

            for(auto child : adj[node]) {
                if(child == parent) continue;
                
                if(!vis[child]) {
                    dfs(dfs, child, node);
                    low[node] = min(low[node], low[child]);

                    if(tin[node] < low[child]) {
                        ans.push_back({node, child});
                    }
                } else {
                    low[node] = min(low[node], low[child]);
                }
            }
        };

        for(int i = 0 ; i < n ; i++) {
            if(!vis[i]) {
                dfs(dfs, i, -1);
            }
        }

        return ans;
    }
};
