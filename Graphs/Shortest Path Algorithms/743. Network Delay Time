https://leetcode.com/problems/network-delay-time/description/


class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>> adj(n+1);
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        vector<int> dist(n+1, INT_MAX);

        for(auto& e : times) {
            int u = e[0];
            int v = e[1];
            int wt = e[2];

            adj[u].push_back({v, wt});
        }

        pq.push({0, k});
        dist[k] = 0;

        while(!pq.empty()) {
            int node = pq.top().second;
            int time = pq.top().first;

            pq.pop();

            for(auto p : adj[node]) {
                int neighbour = p.first;
                int timeToReachNeighbour = p.second;

                if(time + timeToReachNeighbour < dist[neighbour]) {
                    dist[neighbour] = time + timeToReachNeighbour;
                    pq.push({dist[neighbour], neighbour});
                }
            }
        }

        int mx = INT_MIN;
        for(int i = 1 ; i <= n ; i++) {
            if(dist[i] == INT_MAX) return -1;
            mx = max(mx, dist[i]);
        }
        return mx;
    }
};
