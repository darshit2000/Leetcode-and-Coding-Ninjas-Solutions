https://www.naukri.com/code360/problems/largest-island_840701?leftPanelTabValue=PROBLEM



#include <unordered_set>

class DisjointSet    {
    public:
        vector<int> parent, size;
        int components;
        
        // Create an empty union find data structure with N isolated sets.
        DisjointSet(int n)   {
            components = n;
            parent.resize(n);
            size.resize(n, 1);
            for(int i = 0; i < n ; i++)	{
                parent[i] = i;
            }
        }

        // Return the parent of component corresponding to object p.
        int find(int u)	{
            if (u == parent[u]) return u;
            return parent[u] = find(parent[u]);
        }

        // Replace sets containing x and y with their union.
        void merge(int x, int y)	{
            int root_of_x = find(x);
            int root_of_y = find(y);

            if (root_of_x == root_of_y) return;
            
            // make smaller root point to larger one
            if (size[root_of_x] < size[root_of_y])	{ 
                parent[root_of_x] = root_of_y; 
                size[root_of_y] += size[root_of_x]; 
            } else	{ 
                parent[root_of_y] = root_of_x; 
                size[root_of_x] += size[root_of_y]; 
            }
            components--;
        }

        // Are objects x and y in the same set?
        bool connected(int x, int y)    {
            return find(x) == find(y);
        }
        
        // Return the number of disjoint sets.
        int totalComponents() {
            return components;
        }

        // Is the graph connected?
        bool isConnected() {
            return size[find(0)] == size.size();
        }
};

vector<int> numberOfIslandII(int n, int m, vector<vector<int>>& queries, int q)
{
    // Write your code here.
    DisjointSet ds(n*m);
    vector<vector<int>> grid(n, vector<int>(m, 0));
    vector<vector<int>> dir = {{0,1}, {0,-1}, {1,0}, {-1,0}};
    vector<int> ans;

    int total = 0;
    for(auto& q : queries) {
        int row = q[0];
        int col = q[1];
        if(grid[row][col] == 1) {
            ans.push_back(total);
            continue;
        }

        grid[row][col] = 1;
        total++;

        for(auto& d : dir) {
            int nrow = row + d[0];
            int ncol = col + d[1];

            if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && grid[nrow][ncol] == 1) {
                if (ds.find(row * m + col) != ds.find(nrow * m + ncol)) {
                    ds.merge(row * m + col, nrow * m + ncol);
                    total--;
                }
            }
        }
        ans.push_back(total);
    }
    return ans;
}



