https://leetcode.com/problems/word-ladder-ii/description/


// bfs with backtracking

class Solution {
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        // {string, level}
        unordered_map<string,int> mpp;
        unordered_set<string> st(wordList.begin(), wordList.end());
        queue<pair<string, int>> q;
        vector<vector<string>> ans;
        vector<string> sequence;

        if(st.find(endWord) == st.end()) return {};

        q.push({beginWord, 1});
        st.erase(beginWord);
        mpp[beginWord] = 1;

        while(!q.empty()) {
            string word = q.front().first;
            int steps = q.front().second;
            q.pop();

            if(word == endWord) {
                break;
            }

            for(int i = 0 ; i < word.length() ; ++i) {
                for(char ch = 'a' ; ch <= 'z' ; ++ch) {
                    if(word[i] == ch) continue;

                    string temp = word;
                    temp[i] = ch;

                    if(st.find(temp) != st.end()) {
                        mpp[temp] = steps + 1;
                        q.push({temp, steps + 1});
                        st.erase(temp);
                    }
                }
            }
        }
        
        auto dfs = [&] (auto &dfs, string word) -> void {
            if(word == beginWord) {
                reverse(sequence.begin(), sequence.end());
                ans.push_back(sequence);
                reverse(sequence.begin(), sequence.end());
                return;
            }

            int steps = mpp[word];

            for(int i = 0 ; i < word.length() ; ++i) {
                for(char ch = 'a' ; ch <= 'z' ; ++ch) {
                    if(word[i] == ch) continue;

                    string temp = word;
                    temp[i] = ch;

                    if(mpp.find(temp) != mpp.end() && mpp[temp] + 1 == steps) {
                        sequence.push_back(temp);
                        dfs(dfs, temp);
                        sequence.pop_back();
                    }
                }
            }
        };

        sequence.push_back(endWord);
        dfs(dfs, endWord);

        return ans;
    }
};










// only bfs -> TLE as from the beginWord, we are analyzing many paths to the endWord, for eg, we see that there are 100 of paths originating from the beginWord, 
// but then only 2 paths lead to the endWord, rest all will be waste. So we first find out the total paths in which we can reach the endWord, 
// and then we backtrack from that endWord, so in the end, we are analyzing only 2 paths

// class Solution {
// public:
//     vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
//         unordered_set<string> st(wordList.begin(), wordList.end());
//         queue<vector<string>> q;
//         vector<string> usedTillNow;
//         vector<vector<string>> ans;

//         q.push({beginWord});
//         st.erase(beginWord);

//         while(!q.empty()) {
//             int sz = q.size();

//             while(sz--) {
//                 vector<string> vec = q.front();
//                 q.pop();

//                 string word = vec.back();

//                 if(word == endWord) {
//                     ans.push_back(vec);
//                 }

//                 for(int i = 0 ; i < word.length() ; ++i) {
//                     for(char ch = 'a' ; ch <= 'z' ; ++ch) {
//                         if(word[i] == ch) continue;

//                         string temp = word;
//                         temp[i] = ch;

//                         if(st.find(temp) != st.end()) {
//                             vec.push_back(temp);
//                             q.push(vec);
//                             usedTillNow.push_back(temp);
//                             vec.pop_back();
//                         }
//                     }
//                 }
//             }
//             for(auto& str : usedTillNow) {
//                 st.erase(str);
//             }
//             usedTillNow.clear();
//         }

//         return ans;
//     }
// };
