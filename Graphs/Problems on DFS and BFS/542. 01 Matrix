https://leetcode.com/problems/01-matrix/description/



// {{row,col}, time} stored in queue

class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        vector<vector<int>> ans(n, vector<int>(m, INT_MAX));
        vector<vector<int>> dir = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        queue<pair<pair<int,int>, int>> q;

        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < m ; j++) {
                if(mat[i][j] == 0) {
                    visited[i][j] = true;
                    q.push({{i,j}, 0});
                }
            }
        }

        while(!q.empty()) {
            int size = q.size();

            while(size--) {
                int row = q.front().first.first;
                int col = q.front().first.second;
                int dist = q.front().second;
                ans[row][col] = min(dist, ans[row][col]);

                q.pop();

                for(auto &d : dir) {
                    int nRow = row + d[0];
                    int nCol = col + d[1];

                    if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && visited[nRow][nCol] == false) {
                        q.push({{nRow, nCol}, dist + 1});
                        visited[nRow][nCol] = true;
                    }
                }
            }
        }
        return ans;
    }
};








// {row,col} stored in queue

// class Solution {
// public:
//     vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
//         int n = mat.size();
//         int m = mat[0].size();
//         vector<vector<bool>> visited(n, vector<bool>(m, false));
//         vector<vector<int>> ans(n, vector<int>(m, 0));
//         vector<vector<int>> dir = {{0,1}, {0,-1}, {1,0}, {-1,0}};
//         queue<pair<int,int>> q;
//         int dist = 0;

//         for(int i = 0 ; i < n ; i++) {
//             for(int j = 0 ; j < m ; j++) {
//                 if(mat[i][j] == 0) {
//                     visited[i][j] = true;
//                     q.push({i,j});
//                 }
//             }
//         }

//         while(!q.empty()) {
//             int size = q.size();
//             dist++;

//             while(size--) {
//                 int row = q.front().first;
//                 int col = q.front().second;
//                 q.pop();

//                 for(auto &d : dir) {
//                     int nRow = row + d[0];
//                     int nCol = col + d[1];

//                     if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && visited[nRow][nCol] == false) {
//                         if(mat[nRow][nCol] == 1) {
//                             ans[nRow][nCol] = dist;
//                         } 
//                         q.push({nRow, nCol});
//                         visited[nRow][nCol] = true;
//                     }
//                 }
//             }
//         }
//         return ans;
//     }
// };









// O(m * n * (m + n)) 

// class Solution {
// public:
//     vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
//         int n = mat.size();
//         int m = mat[0].size();
        
//         vector<vector<int>> ans(n, vector<int>(m, 0));
//         vector<vector<int>> dir = {{0,1}, {0,-1}, {1,0}, {-1,0}};

//         for(int i = 0 ; i < n ; i++) {
//             for(int j = 0 ; j < m ; j++) {
//                 if(mat[i][j] == 1) {
//                     vector<vector<bool>> visited(n, vector<bool>(m, false));
//                     queue<pair<int,int>> q;
//                     q.push({i,j});
//                     int dist = 0;
//                     bool isDone = false;

//                     while(!q.empty()) {
//                         int size = q.size();
//                         dist++;

//                         while(size--) {
//                             int row = q.front().first;
//                             int col = q.front().second;
//                             q.pop();
//                             visited[row][col] = true;

//                             for(auto &d : dir) {
//                                 int nRow = row + d[0];
//                                 int nCol = col + d[1];

//                                 if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && visited[nRow][nCol] == false) {
//                                     if(mat[nRow][nCol] == 1) {
//                                         q.push({nRow, nCol});
//                                         visited[nRow][nCol] = true;
//                                     } else {
//                                         ans[i][j] = dist;
//                                         isDone = true;
//                                         break;
//                                     }
//                                 }
//                             }
//                             if(isDone) break;
//                         }
//                         if(isDone) break;
//                     }
//                 }
//             }
//         }
//         return ans;
//     }
// };
