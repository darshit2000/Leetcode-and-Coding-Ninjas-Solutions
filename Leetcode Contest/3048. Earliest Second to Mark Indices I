class Solution {
public:
    bool solve(vector<int>& nums, vector<int>& changeIndices, int seconds) {
        int n1 = nums.size();
        int n2 = changeIndices.size();
        vector<int> isIndexPresent(n1, 0), isIndexTakenInVector(n1,0);
        vector<pair<int,int>> v;

        for(int i = seconds ; i >= 0 ; i--) {
            isIndexPresent[changeIndices[i]-1] = 1;
        }
        for(int i : isIndexPresent) {
            if(i == 0) return false;
        }
        
        for(int i = seconds ; i >= 0 ; i--) {
            if(isIndexTakenInVector[changeIndices[i]-1] == 0) {
                isIndexTakenInVector[changeIndices[i]-1] = 1;
                v.push_back({changeIndices[i]-1, i});
            }
        }

        int used = 0;
        for(int i = v.size()-1 ; i >= 0 ; i--) {
            int free = v[i].second - used;
            if(free < nums[v[i].first]) return false;
            used += (nums[v[i].first] + 1);
        }

        return true;
    }

    int earliestSecondToMarkIndices(vector<int>& nums, vector<int>& changeIndices) {
        int low = 0;
        int high = changeIndices.size()-1;
        int ans = -2;

        while(low <= high) {
            int mid = (low+high)/2;

            if(solve(nums, changeIndices, mid)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans + 1;
    }
};
