class Solution {
public:
    vector<int> getLPS(string s) {
        int n = s.length();
        vector<int> lps(n,0);
        
        for(int i = 1 ; i < n ; i++) {
            int prevIndex = lps[i-1];
            while(prevIndex > 0 && s[prevIndex] != s[i]) {
                prevIndex = lps[prevIndex-1];
            }
            lps[i] = prevIndex + (s[prevIndex] == s[i] ? 1 : 0);
        }
        return lps;
    }
    int countPrefixSuffixPairs(vector<string>& words) {
        int count = 0;
        int n = words.size();
        
        for(int i = 0 ; i < n ; i++) {
            for(int j = i+1 ; j < n ; j++) {
                string t1 = words[i];
                string t2 = words[j];
                
                if(t1.length() > t2.length() || t1[0] != t2[0] || t1[t1.length()-1] != t2[t2.length()-1]) continue;
                
                string s = t1 + "$" + t2;
                vector<int> lps = getLPS(s);
                
                if(lps[2 * t1.length()] == lps[s.length()-1] && lps[s.length()-1] == t1.length()) count++;
            }
        }
        return count;
    }
};
