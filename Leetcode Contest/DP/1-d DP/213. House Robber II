https://leetcode.com/problems/house-robber-ii/description/



// Method 1

// class Solution {
// public:
//     int rob(vector<int>& nums) {
//         int n = nums.size();
//         if(n == 1) return nums[0];
//         if(n == 2) return max(nums[0], nums[1]);
//         vector<int> dp1(n-1, 0), dp2(n-1, 0), a, b;
        
//         for(int i = 0 ; i < n ; i++) {
//             if(i != 0) {
//                 a.push_back(nums[i]);
//             }
//             if(i != n-1) {
//                 b.push_back(nums[i]);
//             }
//         }

//         dp1[0] = a[0];
//         dp1[1] = max(dp1[0], a[1]);
//         for(int i = 2 ; i < n-1 ; i++) {
//             dp1[i] = max(dp1[i-1], dp1[i-2] + a[i]);
//         }

//         dp2[0] = b[0];
//         dp2[1] = max(dp2[0], b[1]);
//         for(int i = 2 ; i < n-1 ; i++) {
//             dp2[i] = max(dp2[i-1], dp2[i-2] + b[i]);
//         }

//         return max(dp1[n-2], dp2[n-2]);
//     }
// };



// Method 2

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return nums[0];
        if(n == 2) return max(nums[0], nums[1]);
        vector<int> dp1(n-1, 0), dp2(n-1, 0);
        
        // 0 to n-1
        dp1[0] = nums[0];
        dp1[1] = max(dp1[0], nums[1]);

        for(int i = 2 ; i < n-1 ; i++) {
            dp1[i] = max(dp1[i-1], dp1[i-2] + nums[i]);
        }

        // 1 to n
        dp2[0] = nums[1];
        dp2[1] = max(dp2[0], nums[2]);

        for(int i = 2 ; i < n-1 ; i++) {
            dp2[i] = max(dp2[i-1], dp2[i-2] + nums[i+1]);
        }

        return max(dp1[n-2], dp2[n-2]);
    }
};

