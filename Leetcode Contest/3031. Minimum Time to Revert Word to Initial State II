class Solution {
public:
    int minimumTimeToInitialState(string word, int k) {
        int n = word.length();
        vector<int> lps(n,0);

        for(int i = 1 ; i < n ; i++) {
            int prevIndex = lps[i-1];

            while(prevIndex > 0 && word[prevIndex] != word[i]) {
                prevIndex = lps[prevIndex-1];
            }

            lps[i] = prevIndex + (word[prevIndex] == word[i] ? 1 : 0);
        }

        int reqSuffixLength = lps[n-1];

        while(reqSuffixLength > 0 && ((n - reqSuffixLength) % k) != 0) {
            reqSuffixLength = lps[reqSuffixLength-1];
        }
        
        if((n - reqSuffixLength) % k == 0) {
            return (n - reqSuffixLength)/k;
        }

        return ceil((double)n/(double)k);
    }
};
