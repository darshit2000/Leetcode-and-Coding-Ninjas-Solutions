https://leetcode.com/problems/apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k/description/




// method 1

class Solution {
public:
    bool solve(int maxOp, int k) {
        int incrementOp = 0;
        
        while(incrementOp <= maxOp) {
            int currNum = 1 + incrementOp;

            int remainingOp = maxOp - incrementOp;

            // + 1 because of the original number
            // [1] -> [3] => 2 incOp. RemainingOp = 5 - 2 = 3. 
            // Then adding it more 3 times : [3,3,3,3]  so, sum = 3 * (3 + 1) = 12 
            int currSum = currNum * (remainingOp + 1);

            if(currSum >= k) return true;
            
            incrementOp++;
        }
        
        return false;
    }
    int minOperations(int k) {
        if(k == 1) return 0;
        int low = 0;
        int high = k-1;
        int ans = 0;
        
        while(low <= high) {
            int mid = (low + high)/2;
            
            if(solve(mid, k)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
};











// method 2

// class Solution {
// public:
//     bool solve(int maxOp, int k) {
//         int incOp = 0;
        
//         while(incOp <= maxOp) {
//             int tot = 0;
//             tot += incOp;
            
//             int temp = 1 + incOp;
//             tot += (k/temp - 1);
//             if(k % temp != 0) tot++;
            
//             if(tot <= maxOp) return true;
            
//             incOp++;
//         }
        
//         return false;
//     }
//     int minOperations(int k) {
//         if(k == 1) return 0;
//         int low = 0;
//         int high = k-1;
//         int ans = 0;
        
//         while(low <= high) {
//             int mid = (low + high)/2;
            
//             if(solve(mid, k)) {
//                 ans = mid;
//                 high = mid - 1;
//             } else {
//                 low = mid + 1;
//             }
//         }
//         return ans;
//     }
// };
