/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        queue<pair<TreeNode*,pair<int,int>>> q;
        q.push({root, {0,0}});
        map<int, map<int, multiset<int>>> mpp;
        vector<vector<int>> ans;

        while(!q.empty()) {
            int size = q.size();

            while(size--) {
                auto item = q.front();
                q.pop();
                int xCord = item.second.first;
                int yCord = item.second.second;

                mpp[yCord][xCord].insert((item.first)->val);

                if((item.first)->left) q.push({(item.first)->left, {xCord+1, yCord-1}});
                if((item.first)->right) q.push({(item.first)->right, {xCord+1, yCord+1}});
            }
        }

        for(auto innerMap : mpp) {
            vector<int> temp;
            for(auto s : innerMap.second) {
                temp.insert(temp.end(), s.second.begin(), s.second.end());
            }
            ans.push_back(temp);
        }
        return ans;
    }
};










/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// public:
//     static bool compare(pair<int,int> a, pair<int,int> b) {
//         if(a.second == b.second) {
//             return a.first < b.first;
//         } else {
//             return a.second < b.second;
//         }
//     }

//     vector<vector<int>> verticalTraversal(TreeNode* root) {
//         queue<pair<TreeNode*,pair<int,int>>> q;
//         q.push({root, {0,0}});
//         map<int, vector<pair<int,int>>> mpp;
//         vector<vector<int>> ans;

//         while(!q.empty()) {
//             int size = q.size();

//             while(size--) {
//                 auto item = q.front();
//                 q.pop();
//                 int xCord = item.second.first;
//                 int yCord = item.second.second;

//                 if(mpp.find(yCord) != mpp.end()) mpp[yCord].push_back({(item.first)->val, item.second.first});
//                 else mpp[yCord] = {{(item.first)->val, item.second.first}};

//                 if((item.first)->left) q.push({(item.first)->left, {xCord+1, yCord-1}});
//                 if((item.first)->right) q.push({(item.first)->right, {xCord+1, yCord+1}});
//             }
//         }

//         for(auto item : mpp) {

//             sort((item.second).begin(), (item.second).end(), compare);
//             vector<int> temp;
//             for(auto el : item.second) {
//                 temp.push_back(el.first);
//             }

//             ans.push_back(temp);
//         }
//         return ans;
//     }
// };
