class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        int n = intervals.size();
        int flag = 0;
        if(n == 0) {
            return {{newInterval[0],newInterval[1]}};
        }
        vector<vector<int>> ans;
        int i = 0;

        // Case 1: no overlapping case before the merge intervals
		// Compare ending point of intervals to starting point of newInterval
        while(i < n && intervals[i][1] < newInterval[0]) {
            ans.push_back(intervals[i]);
            i++;
        }

        // Case 2: overlapping case and merging of intervals
        while(i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = min(intervals[i][0], newInterval[0]);
            newInterval[1] = max(intervals[i][1], newInterval[1]);
            i++;
        }
        ans.push_back(newInterval);

        // Case 3: no overlapping of intervals after newinterval being merged
        while(i < n) {
            ans.push_back(intervals[i]);
            i++;
        }
        return ans;
    }
};











// class Solution {
// public:
//     vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
//         int n = intervals.size();
//         int flag = 0;
//         if(n == 0) {
//             return {{newInterval[0],newInterval[1]}};
//         }
//         vector<vector<int>> ans;
//         int i = 0;

//         while(i < n) {
//             if(intervals[i][1] < newInterval[0]) {
//                 ans.push_back(intervals[i]);
//                 i++;
//             } 
//             else {
//                 flag = 1;

//                 if(intervals[i][0] > newInterval[1]) {
//                     ans.push_back(newInterval);
//                 } 
//                 else {
//                     int newStartTime = min(intervals[i][0],newInterval[0]);
//                     int newEndTime = max(intervals[i][1], newInterval[1]);
//                     i++;
//                     while(i < n && intervals[i][0] <= newEndTime) {
//                         newEndTime = max(intervals[i][1], newEndTime);
//                         i++;
//                     }
//                     ans.push_back({newStartTime,newEndTime});
//                 }
//                 while(i < n) {
//                     ans.push_back(intervals[i]);
//                     i++;
//                 } 
//             }
//         }
//         if(flag == 0) ans.push_back(newInterval);
//         return ans;
//     }
// };
