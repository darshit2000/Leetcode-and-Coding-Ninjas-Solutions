#include <bits/stdc++.h> 

bool compare(pair<int,int> a, pair<int,int> b) {
    double v1 = (double)a.second/(double)a.first;
    double v2 = (double)b.second/(double)b.first;
    return v1 > v2;
}

double maximumValue (vector<pair<int, int>>& items, int n, int w)
{
    // Write your code here.
    // ITEMS contains {weight, value} pairs.
    sort(items.begin(), items.end(), compare);
    int currWeight = 0;
    double maxProfit = 0.0;
    for(int i = 0 ; i < n ; i++) {
        if(currWeight + items[i].first <= w) {
            maxProfit += (items[i].second);
            currWeight += (items[i].first);
        } else {
            int rem = w-currWeight;
            maxProfit += ((double)rem/(double)items[i].first)*(double)items[i].second;
            break;
        }
    }
    return maxProfit;
}








// GFG

//class implemented
/*
struct Item{
    int value;
    int weight;
};
*/

class Solution
{
    public:
    //Function to get the maximum total value in the knapsack.
    
    static bool compare(Item a, Item b) {
        double v1 = (double)a.value/a.weight;
        double v2 = (double)b.value/b.weight;
        return v1 > v2;
    }
    
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        // Your code here
        double maxProfit = 0.0;
        int currWeight = 0;
        
        sort(arr, arr+n, compare);

        for(int i = 0 ; i < n ; i++) {
            if(currWeight + arr[i].weight <= W) {
                currWeight += arr[i].weight;
                maxProfit += arr[i].value;
            } else {
                double rem = (double)(W - currWeight);
                double v1 = (double)arr[i].weight;
                double v2 = (double)arr[i].value;
                maxProfit += ((v2/v1)*rem);
                break;
            }
        }
        return maxProfit;
    }
};
