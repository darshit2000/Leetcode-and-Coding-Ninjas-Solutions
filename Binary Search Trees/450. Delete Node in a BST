/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// with finding inorder predecessor/ successor

// int getMin(TreeNode* curr) {
//     if(curr->left == NULL) return curr->val;
//     while(curr->left) curr = curr->left;
//     return curr->val;
// }

// class Solution {
// public:
//     TreeNode* deleteNode(TreeNode* root, int key) {
//         if(!root) return NULL;

//         if(key < root->val) {
//             root->left = deleteNode(root->left, key);
//         } else if(root->val < key) {
//             root->right = deleteNode(root->right, key);
//         } else {
//             if(root->right && root->left) {
//                 int minVal = getMin(root->right);
//                 root->val = minVal;
//                 root->right = deleteNode(root->right, minVal);
//             } else if(!root->right) {
//                 return root->left;
//             } else if(!root->left) {
//                 return root->right;
//             } else return NULL;
//         }
//         return root;
//     }
// };







// without finding inorder predecessor/ successor

class Solution {
public:
    TreeNode* prev = NULL;
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return NULL;
        if(key < root->val) {
            prev = root;
            root->left = deleteNode(root->left, key);
        } else if(root->val < key) {
            prev = root;
            root->right = deleteNode(root->right, key);
        } else {
            if(root->right && root->left) {
                 TreeNode* tempRight = root->right;
                 TreeNode* curr = root->left;
                 while(curr->right) curr = curr->right;
                 curr->right = tempRight;
                 return root->left;
            } else if(!root->left) {
                return root->right;
            } else if(!root->right) {
                return root->left;
            } else {
                return NULL;
            }
        }
        return root;
    }
};

