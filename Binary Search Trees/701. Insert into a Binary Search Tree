/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(!root) {
            return new TreeNode(val);
        }
        TreeNode* prev = NULL;
        TreeNode* curr = root;
        while(curr) {
            prev = curr;
            if(val <= curr->val) {
                curr = curr->left;
            } else if(curr->val < val) {
                curr = curr->right;
            }
        }
        if(val <= prev->val) {
            prev->left = new TreeNode(val);
        } else {
            prev->right = new TreeNode(val);
        }
        return root;
    }
};








// class Solution {
// public:
//     void helper(TreeNode* root, TreeNode* val){
//         if(root->left==NULL && val->val < root->val){
//             root->left=val;
//             return;
//         }
//         if(root->right==NULL && val->val > root->val){
//             root->right=val;
//             return ;
//         }
//         if(val->val < root->val) helper(root->left,val);
//         if(val->val > root->val) helper(root->right,val);
//     }
//     TreeNode* insertIntoBST(TreeNode* root, int val) {
//        TreeNode* n =new TreeNode(val);
//         if(root==NULL){
//             return n;
//         }
        
//         helper(root,n);
//         return root;
//     }
// };
