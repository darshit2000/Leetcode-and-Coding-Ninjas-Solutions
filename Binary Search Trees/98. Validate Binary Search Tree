/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        if(!root) return true;
        if(root && !root->left && !root->right) return true;

        if(root && root->left && !root->right) {
            return (root->left->val < root->val) && isValidBST(root->left);
        }
        if(root && !root->left && root->right) {
            return (root->val < root->right->val) && isValidBST(root->right);
        }

        return (root->left->val < root->val) && (root->val < root->right->val) && isValidBST(root->left) && isValidBST(root->right);
    }
};




// Inorder traversal

// class Solution {
// public:
//     void inorder(TreeNode* root, vector<int> &v) {
//         if(!root) return;

//         inorder(root->left, v);
//         v.push_back(root->val);
//         inorder(root->right, v);
//     }
//     bool isValidBST(TreeNode* root) {
//         if(!root) return true;
//         vector<int> v;
//         inorder(root, v);
//         for(int i = 1 ; i < v.size() ; i++) {
//             if(v[i-1] >= v[i]) return false;
//         }
//         return true;
//     }
// };
