/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// O(1) space

class Solution {
public:
    TreeNode* first = NULL, *middle = NULL, *last = NULL, *prev = NULL;

    void inorder(TreeNode* root) {
        if(!root) return;

        inorder(root->left);

        if(prev && prev->val > root->val) {
            if(first == NULL) {
                first = prev;
                middle = root;
            } else {
                last = root;
                return;
            }
        } 

        prev = root;

        inorder(root->right);
    }
    void recoverTree(TreeNode* root) {
        inorder(root);
        
        if(first && last) {
            int temp = first->val;
            first->val = last->val;
            last->val = temp;
        } else if(first && middle && !last) {
            int temp = first->val;
            first->val = middle->val;
            middle->val = temp;
        }
        return;
    }
};








// O(n) space

// class Solution {
// public:
//     void inorder(TreeNode* root, vector<int> &v1, vector<TreeNode*> &v2) {
//         if(!root) return;

//         inorder(root->left, v1, v2);
//         v1.push_back(root->val);
//         v2.push_back(root);
//         inorder(root->right, v1, v2);
//     }
//     void recoverTree(TreeNode* root) {
//         vector<int> v1;
//         vector<TreeNode*> v2;
//         inorder(root, v1, v2);
        
//         sort(v1.begin(), v1.end());
//         TreeNode* node1 = NULL,* node2 = NULL;

//         for(int i = 0 ; i < v1.size() ; i++) {
//             if(v1[i] != v2[i]->val) {
//                 if(node1 == NULL) {
//                     node1 = v2[i];
//                 } else {
//                     node2 = v2[i];
//                     break;
//                 }
//             }
//         }
//         int temp = node1->val;
//         node1->val = node2->val;
//         node2->val = temp;
//         return;
//     }
// };
