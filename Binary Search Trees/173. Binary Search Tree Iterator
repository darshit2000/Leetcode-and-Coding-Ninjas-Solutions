https://leetcode.com/problems/binary-search-tree-iterator/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
    stack<TreeNode*> stk;
    TreeNode* curr;

    BSTIterator(TreeNode* root) {
        curr = root;
        while(curr) {
            stk.push(curr);
            curr = curr->left;
        }
    }
    
    int next() {
        curr = stk.top();
        int ans = curr->val;
        stk.pop();

        if(curr->right) {
            curr = curr->right;
            while(curr) {
                stk.push(curr);
                curr = curr->left;
            }
        }
        return ans;
    }
    
    bool hasNext() {
        if(!stk.empty()) return true;
        return false;
    }
};





// find the inorder in the beginning only

// class BSTIterator {
// public:
//     vector<int> v;
//     int index = 0;
//     BSTIterator(TreeNode* root) {
//         inorder(root, v);
//     }

//     void inorder(TreeNode* root, vector<int> &v) {
//         if(!root) return;

//         inorder(root->left, v);
//         v.push_back(root->val);
//         inorder(root->right, v);
//     }
    
//     int next() {
//         int ans = v[index];
//         index++;
//         return ans;
//     }
    
//     bool hasNext() {
//         if(index <= v.size()-1) return true;
//         return false;
//     }
// };

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
