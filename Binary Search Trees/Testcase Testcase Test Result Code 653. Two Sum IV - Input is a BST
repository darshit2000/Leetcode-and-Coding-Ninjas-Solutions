https://leetcode.com/problems/two-sum-iv-input-is-a-bst/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    void inorder(TreeNode* root, vector<int> &v) {
        if(!root) return;

        inorder(root->left, v);
        v.push_back(root->val);
        inorder(root->right, v);
    }
    bool findTarget(TreeNode* root, int k) {
        vector<int> v;
        inorder(root, v);

        int n = v.size();
        int sum;
        int i = 0;
        int j = n-1;
        
        while(i < j) {
            sum = v[i] + v[j];
            if(sum > k) {
                j--;
            } else if(sum < k) {
                i++;
            } else return true;
        }

        return false;
    }
};








// find inorder and check in inorder itself

// class Solution {
// public:
//     void inorder(TreeNode* root, vector<int> &v, bool &ans, int &k) {
//         if(!root || ans == true) return;

//         inorder(root->left, v, ans, k);
//         if(ans) return;
        
//         int curr = root->val;
        
//         if(find(v.begin(), v.end(), k-curr) != v.end()) {
//             ans = true;
//         } else {
//             v.push_back(curr);
//             inorder(root->right, v, ans, k);
//         }
//     }
//     bool findTarget(TreeNode* root, int k) {
//         vector<int> v;
//         bool ans = false;
//         inorder(root, v, ans, k);

//         return ans;
//     }
// };


