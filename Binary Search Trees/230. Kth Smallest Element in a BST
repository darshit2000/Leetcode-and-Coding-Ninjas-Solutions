/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// class Solution {
// public:
//     int kthSmallest(TreeNode* root, int k) {
//         priority_queue<int> maxHeap;
//         stack<TreeNode*> stk;
//         TreeNode* curr = root;

//         while(!stk.empty() || curr != NULL) {
//             while(curr) {
//                 stk.push(curr);
//                 curr = curr->left;
//             }
//             curr = stk.top();
//             stk.pop();
//             if(maxHeap.size() < k) {
//                 maxHeap.push(curr->val);
//             } else {
//                 break;
//             }
//             curr = curr->right;
//         }
//         return maxHeap.top();
//     }
// };







class Solution {
public:
    void inorder(TreeNode* root, int &count, int &k, int &ans) {
        if(!root) return;

        inorder(root->left, count, k, ans);
        count++;
        if(count == k) {
            ans = root->val;
            return;
        }
        inorder(root->right, count, k, ans);
    }

    int kthSmallest(TreeNode* root, int k) {
        int ans = -1;
        int count = 0;
        inorder(root, count, k, ans);
        return ans;
    }
};







// class Solution {
// public:
//     void inorder(TreeNode* root, vector<int> &v) {
//         if(!root) return;

//         inorder(root->left, v);
//         v.push_back(root->val);
//         inorder(root->right, v);
//     }

//     int kthSmallest(TreeNode* root, int k) {
//         vector<int> v;
//         inorder(root, v);
//         return v[k-1];
//     }
// };
