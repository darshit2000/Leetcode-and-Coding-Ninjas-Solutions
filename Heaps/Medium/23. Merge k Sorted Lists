/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    struct compare {
        bool operator() (const ListNode* a, const ListNode* b) {
            return (a->val > b->val);
        }
    };

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0) return NULL;
        else if(lists.size() == 1) return lists[0];
        priority_queue<ListNode*, vector<ListNode*>, compare> pq;
        ListNode* head = new ListNode(-1);
        ListNode* currNode = head;

        for(int i = 0 ; i < lists.size() ; i++) {
            if(lists[i]) pq.push(lists[i]);
        }

        while(!pq.empty()) {
            ListNode* nextNode = new ListNode(pq.top()->val);
            ListNode* curr = pq.top();
            if(curr->next) pq.push(curr->next);
            pq.pop();
            currNode->next = nextNode;
            currNode = nextNode;
        }
        return head->next;
    }
};



// Priority Queue

// class Solution {
// public:
//     ListNode* mergeKLists(vector<ListNode*>& lists) {
//         if(lists.size() == 0) return NULL;
//         else if(lists.size() == 1) return lists[0];
//         priority_queue<pair<int,ListNode*>, vector<pair<int,ListNode*>>, greater<pair<int,ListNode*>>> pq;
//         ListNode* head = new ListNode(-1);
//         ListNode* currNode = head;

//         for(int i = 0 ; i < lists.size() ; i++) {
//             if(lists[i]) pq.push({lists[i]->val, lists[i]});
//         }

//         while(!pq.empty()) {
//             ListNode* nextNode = new ListNode(pq.top().first);
//             ListNode* curr = pq.top().second;
//             if(curr->next) pq.push({curr->next->val, curr->next});
//             pq.pop();
//             currNode->next = nextNode;
//             currNode = nextNode;
//         }
//         return head->next;
//     }
// };




// Merge sort

// class Solution {
// public:
//     ListNode* merge(ListNode* list1, ListNode* list2) {
//         ListNode* newHead = new ListNode(-1);
//         ListNode* curr = newHead;
//         ListNode* left = list1;
//         ListNode* right = list2;

//         while(left && right) {
//             if(left->val <= right->val) {
//                 curr->next = left;
//                 left = left->next;
//             } else {
//                 curr->next = right;
//                 right = right->next;
//             }
//             curr = curr->next;
//         }
//         if(left) {
//             curr->next = left;
//         }
//         if(right) {
//             curr->next = right;
//         }
//         return newHead->next;
//     }
//     ListNode* mergeKLists(vector<ListNode*>& lists) {
//         if(lists.size() == 0) return NULL;
//         else if(lists.size() == 1) return lists[0];

//         ListNode* list1 = lists[0];
//         ListNode* list2 = NULL;
//         ListNode* head = NULL;
//         for(int i = 1 ; i < lists.size() ; i++) {
//             list2 = lists[i];
//             head = merge(list1, list2);
//             list1 = head;
//         }
//         return head;
//     }
// };
