
int merge(vector<int> &a, int low, int mid, int high) {
    int cnt = 0;
    vector<int> temp;
    int left = low;
    int right = mid+1;
    while(left <= mid && right <= high) {
        if(a[left] > a[right]) {
            cnt += mid-left+1;
            temp.push_back(a[right]);
            right++;
        } else {
            temp.push_back(a[left]);
            left++;
        }
    }
    while(right <= high) {
        temp.push_back(a[right]);
        right++;
    }
    while(left <= mid) {
        temp.push_back(a[left]);
        left++;
    }

    for(int k = low ; k <= high ; k++) {
        a[k] = temp[k-low];
    }
    return cnt;
}

int mergeSort(vector<int> &a, int low, int high) {
    int cnt = 0;
    if(low >= high) return cnt;
    int mid = (low+high)/2;
    cnt += mergeSort(a, low, mid);
    cnt += mergeSort(a, mid+1, high);
    cnt += merge(a, low, mid, high);
    return cnt;
}

int numberOfInversions(vector<int>&a, int n) {
    // Write your code here.
    int count = mergeSort(a, 0, n-1);
    return count;
}
