class Solution {
public:
    static bool myComp(const vector<int>& a, const vector<int>& b) {
        if(a[0] == b[0]) {
            return (a[1] < b[1]);
        } else {
            return (a[0] < b[0]);
        }
    }

    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        vector<vector<int>> ans;

        sort(intervals.begin(), intervals.end(), myComp);
        int mn = intervals[0][0];
        int mx = intervals[0][1];

        if(n == 1) {
            vector<int> temp = {intervals[0][0], intervals[0][1]};
            ans.push_back(temp);
            return ans;
        }

        int i = 1;
        while(i < n) {
            if(intervals[i][0] <= mx) {
                mn = min(mn, intervals[i][0]);
                mx = max(mx, intervals[i][1]);
                i++;
            } else {
                vector<int> temp = {mn, mx};
                ans.push_back(temp);
                mn = intervals[i][0];
                mx = intervals[i][1];
                i++;
            }
        }
        if(i == n) {
            vector<int> temp = {mn, mx};
            ans.push_back(temp);
        }
        return ans;
    }
};
