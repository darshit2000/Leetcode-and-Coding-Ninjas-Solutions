// int count = 0;

void merge(vector<int>& skill, int low, int mid, int high) {
    vector<int> temp;   
    int left = low;
    int right = mid+1;
    while(left <= mid && right <= high) {
        if(skill[left] <= skill[right]) {
            temp.push_back(skill[left]);
            left++;
        } else {
            temp.push_back(skill[right]);
            right++;
        }
    }

    while(left <= mid) {
        temp.push_back(skill[left]);
        left++;
    }
    while(right <= high) {
        temp.push_back(skill[right]);
        right++;
    }

    for(int i = low ; i <= high; i++) {
        skill[i] = temp[i-low];
    }
}

int countReverse(vector<int> &skill, int low, int mid, int high) {
    int right = mid+1;
    int count = 0;
    for(int i = low ; i <= mid ; i++) {
        while((right <= high) && (skill[i] > (2*skill[right]))) {
            right++;
        }
        count += (right-mid-1);
    }
    return count;
} 

int mergeSort(vector<int>& skill, int low, int high) {
    int count = 0;
    if(low >= high) return count;
    int mid = (low+high)/2;
    count += mergeSort(skill, low, mid);
    count += mergeSort(skill, mid+1, high);
    count += countReverse(skill, low, mid, high);
    merge(skill, low, mid, high);
    return count;
}

int team(vector <int> & skill, int n)
{
    // Write your code here.
    int count = 0;
    count = mergeSort(skill, 0, n-1);
    return count;
    

    // Brute Force Method

    // int count = 0;
    // for(int i = 0 ; i < n ; i++) {
    //     int j = i+1;
    //     while(j < n) {
    //       if (skill[i] > 2 * skill[j]) {
    //         count++;
    //       }
    //       j++;
    //     }
    // }
    // return count;
}
