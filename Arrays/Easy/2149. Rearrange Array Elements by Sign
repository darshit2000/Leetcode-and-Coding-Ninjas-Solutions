class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        int n = nums.size();

        vector<int> ans(n,0);
        int pos = 0;
        int neg = 1;

        for(int i = 0 ; i < n ; i++) {
            if(nums[i] > 0) {
                ans[pos] = nums[i];
                pos += 2;
            }
            else {
                ans[neg] = nums[i];
                neg += 2;
            }
        } 
        
        return ans;
    }
};










// class Solution {
// public:
//     vector<int> rearrangeArray(vector<int>& nums) {
//         int n = nums.size();

//         vector<int> ans, pos, neg;

//         for(int i = 0 ; i < n ; i++) {
//             if(nums[i] > 0) pos.push_back(nums[i]);
//             else neg.push_back(nums[i]);
//         } 

//         int i = 0, j = 0;
//         while(i < pos.size() && j < neg.size()) {
//             ans.push_back(pos[i]);
//             ans.push_back(neg[j]);
//             i++;
//             j++;
//         }
        
//         if(i < pos.size()) ans.push_back(pos[i]);
//         if(j < neg.size()) ans.push_back(neg[j]);
        
//         return ans;
//     }
// };








// class Solution {
// public:
//     vector<int> rearrangeArray(vector<int>& nums) {
//         int n = nums.size();
//         int pos = -1;
//         int neg = -1;
//         vector<int> ans;

//         for(int i = 0 ; i < n ; i++) {
//             if(nums[i] > 0) {
//                 pos = i;
//                 break;
//             }
//         } 
//         for(int i = 0 ; i < n ; i++) {
//             if(nums[i] < 0) {
//                 neg = i;
//                 break;
//             }
//         } 
//         while(pos < n && neg < n) {
//             ans.push_back(nums[pos]);
//             ans.push_back(nums[neg]);
//             pos++;
//             neg++;
//             while(pos < n && nums[pos] < 0) pos++;
//             while(neg < n && nums[neg] > 0) neg++;
//         }
//         if(pos < n) ans.push_back(nums[pos]);
        
//         if(neg < n) ans.push_back(nums[neg]);
        
//         return ans;
//     }
// };
