class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int mn = prices[0];
        int mx = 0;

        for(int i = 1 ; i < n ; i++) {
            mn = min(mn, prices[i]);
            mx = max(mx, prices[i]-mn);
        }
        return mx;
    }
};

// OR

// #include <bits/stdc++.h>

// using namespace std;

// class Solution {
// public:
//     int maxProfit(vector<int>& prices) {
//         int n = prices.size();
//         int i = 0;
//         int j = 1;
//         int mx = 0;

//         while(j < n) {
//             if(prices[j] - prices[i] > 0) {
//                 mx = max(mx, (prices[j] - prices[i]));
//                 j++;
//             } else if(prices[j] - prices[i] < 0) {
//                 while((prices[j] - prices[i] < 0) && (i < j)) {
//                     i++;
//                 }
//                 if(i == j) j++;
//             } else if(prices[j] - prices[i] == 0) {
//                 j++;
//             }
//         }
//         return mx;
//     } 
// };
