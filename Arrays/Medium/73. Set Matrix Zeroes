class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {

        int m = matrix.size();
        int n = matrix[0].size();


        // Approach 1 : TC: O(N*M + N*M*(N+M))     SC: O(N*M)
        // At most, all elements (N*M) can be zero. So second for loop can run for N*M times.


        // vector<pair<int,int>> vec;

        // for(int i = 0 ; i < m ; i++) {
        //     for(int j = 0 ; j < n ; j++) {
        //         if(matrix[i][j] == 0) {
        //             vec.push_back(make_pair(i,j));
        //         }
        //      }
        // }
        // for(auto item : vec) {
        //     int row = item.first;
        //     int col = item.second;
        //     for(int i = 0 ; i < n ; i++) {
        //         matrix[row][i] = 0;
        //     }
        //     for(int i = 0 ; i < m ; i++) {
        //         matrix[i][col] = 0;
        //     }
        // }




        // Approach 2 : TC: O(N*M + N*M*(N+M))    SC: O(1)

        // for(int i = 0 ; i < m ; i++) {
        //     for(int j = 0 ; j < n ; j++) {
        //         if(matrix[i][j] == 0) {
        //             for(int k = 0 ; k < n ; k++) {
        //                 if(matrix[i][k] != 0) {
        //                     matrix[i][k] = -1000;
        //                 }
        //             }
        //             for(int k = 0 ; k < m ; k++) {
        //                 if(matrix[k][j] != 0) {
        //                     matrix[k][j] = -1000;
        //                 } 
        //             }
        //         }
        //     }
        // }

        // for(int i = 0 ; i < m ; i++) {
        //     for(int j = 0 ; j < n ; j++) {
        //         if(matrix[i][j] == -1000) {
        //             matrix[i][j] = 0;
        //         }
        //     }
        // }




        // Approach 3 : TC: O(N*M)      SC: O(N+M)
        // vector<int> row(m);
        // vector<int> col(n);

        // for(int i = 0 ; i < m ; i++) {
        //     for(int j = 0 ; j < n ; j++) {
        //         if(matrix[i][j] == 0) {
        //             row[i] = 1;
        //             col[j] = 1;
        //         }
        //     }
        // }

        // for(int i = 0 ; i < m ; i++) {
        //     for(int j = 0 ; j < n ; j++) {
        //         if(row[i] == 1 || col[j] == 1) {
        //             matrix[i][j] = 0;
        //         }
        //     }
        // }




        // Approach 4 : TC: O(2*N*M)      SC: O(1)
        // Take row vector as the first column of matrix and col vector as first row of matrix

        int col0 = 1;
        for(int i = 0 ; i < m ; i++) {
            for(int j = 0 ; j < n ; j++) {
                if(matrix[i][j] == 0) {
                    matrix[i][0] = 0;
                    if(j != 0) matrix[0][j] = 0;
                    else col0 = 0;
                }
            }
        }
        for(int i = 1 ; i < m ; i++) {
            for(int j = 1 ; j < n ; j++) {
                if(matrix[i][0] == 0 || matrix[0][j] == 0) {
                    matrix[i][j] = 0;
                }
            }
        }

        for(int j = 1 ; j < n ; j++) {
            if(matrix[0][0] == 0) {
                matrix[0][j] = 0;
            }
        }

        for(int i = 0 ; i < m ; i++) {
            if(col0 == 0) {
                matrix[i][0] = 0;
            }
        }

    } 
};
